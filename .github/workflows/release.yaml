name: Release

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          environment-file: conda/release.yaml
          channels: conda-forge,nodefaults
          activate-environment: makim
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Install deps
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Run semantic release (for tests)
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: makim --verbose release.dry

      - name: Run semantic release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          poetry config pypi-token.pypi ${PYPI_TOKEN}
          makim --verbose release.ci

      - name: Generate documentation with changes from semantic-release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: makim --verbose docs.build

      - name: GitHub Pages action
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: peaceiris/actions-gh-pages@v3.5.9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/

      - name: Setup tmate session
        if: "${{ failure() && (contains(github.event.pull_request.labels.*.name, 'ci:enable-debugging')) }}"
        uses: mxschmitt/action-tmate@v3

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            goarch: amd64
            deb_arch: amd64
            rpm_arch: x86_64
          - arch: arm64
            goarch: arm64
            deb_arch: arm64
            rpm_arch: aarch64

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          environment-file: conda/release.yaml
          channels: conda-forge,nodefaults
          activate-environment: makim
          auto-update-conda: true
          conda-solver: libmamba
          python-version: "3.11"

      - name: Install dependencies using Poetry
        run: |
          poetry config virtualenvs.create false
          poetry install

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"

      - name: Install FPM
        run: gem install fpm

      - name: APT Install rpm, pacman and snap dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          # Check if bsdtar is available in the default repositories
          if ! apt-cache show bsdtar > /dev/null 2>&1; then
            echo "Adding required repositories for bsdtar"
            sudo add-apt-repository universe
            sudo apt-get update
          fi
          # Install dependencies
          sudo apt-get install -y rpm snapd bsdtar

      - name: Make scripts executable
        run: chmod +x packaging/scripts/postinstall.sh

      - name: build python standalone binary
        run: |
          makim --verbose packaging.build_binary

      - name: Package DEB for ${{ matrix.arch }}
        run: |
          makim --verbose packaging.build_deb

      - name: Package RPM for ${{ matrix.arch }}
        run: |
          makim --verbose packaging.build_rpm

      - name: Package Snap for ${{ matrix.arch }}
        run: |
          makim --verbose packaging.build_snap

      # - name: Package apk for ${{ matrix.arch }}
      #   run: |
      #     makim --verbose packaging.build_apk

      - name: Package pacman for ${{ matrix.arch }}
        run: |
          makim --verbose packaging.build_pacman

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.arch }}
          path: |
            *.deb
            *.rpm
            *.snap
            # *.apk
            *.pkg.tar.xz

  package-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: Display structure of downloaded files
        run: ls -R packages

      - name: Flatten directory structure
        run: |
          mkdir -p release_files
          # find packages -type f -name "*.deb" -o -name "*.rpm" -o -name "*.snap" -o -name "*.apk" -o -name "*.pkg.tar.xz" | xargs -I {} cp {} release_files/
          find packages -type f -name "*.deb" -o -name "*.rpm" -o -name "*.snap" -o -name "*.pkg.tar.xz" | xargs -I {} cp {} release_files/

      - name: Create "any" and "noarch" packages
        run: |
          # For demonstration, create copies of the amd64 packages for architecture-independent packages
          cd release_files
          ls -la
          # Find the correct files dynamically instead of hardcoding names
          AMDEB=$(find . -name "*amd64.deb" | head -1)
          AMRPM=$(find . -name "*x86_64.rpm" | head -1)
          # AMAPK=$(find . -name "*.apk" | head -1)
          AMPKG=$(find . -name "*.pkg.tar.xz" | head -1)
          AMSNAP=$(find . -name "*.snap" | head -1)


          if [ -n "$AMDEB" ]; then
            cp "$AMDEB" "makim_${VERSION}_any.deb"
          else
            echo "Warning: No amd64 DEB package found"
          fi

          if [ -n "$AMRPM" ]; then
            cp "$AMRPM" "makim-${VERSION}-1.noarch.rpm"
          else
            echo "Warning: No x86_64 RPM package found"
          fi

          # if [ -n "$AMAPK" ]; then
          #   cp "$AMAPK" "makim-${VERSION}-noarch.apk"
          # else
          #   echo "Warning: No APK package found"
          # fi

          if [ -n "$AMPKG" ]; then
            cp "$AMPKG" "makim-${VERSION}-noarch.pkg.tar.xz"
          else
            echo "Warning: No pacman package found"
          fi

          if [ -n "$AMSNAP" ]; then
            cp "$AMSNAP" "makim_${VERSION}_any.snap"
          else
            echo "Warning: No snap package found"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release_files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
