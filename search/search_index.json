{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p><code>MakIm</code> or just <code>makim</code> is based on <code>make</code> and focus on improve the way to define targets and dependencies. Instead of using the <code>Makefile</code> format, it uses <code>yaml</code> format.</p> <p>The idea of this project is to offer a way to define targets and dependencies with some control options, like conditionals <code>if</code>.</p> <p>It allows a very easy way to define texts for documentation and extra parameters for each target.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.github.io/makim</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Help text as first-class in the <code>.makim.yaml</code> specification. It can be used by   targets and arguments.</li> <li>Targets have an option for arguments.</li> <li>Targets have an option for dependencies.</li> <li>Dependencies can call a target with specific arguments.</li> <li>Dependencies can have a conditional control flow (<code>if</code>).</li> <li>Allow the creation of groups, so the targets can be organized by topics.</li> <li>Targets and groups have an option for user defined variables and/or   environment variables.</li> <li>Access arguments, variables or environment variables via template (using   Jinja2).</li> <li>Option for using dot environment files using <code>env-file</code> key.</li> </ul>"},{"location":"#how-to-use-it","title":"How to use it","text":"<p>First you need to place the config file <code>.makim.yaml</code> in the root of your project. This is an example of a configuration file:</p> <pre><code>version: 1.0.0\ngroups:\n  default:\n    env-file: .env\n    targets:\n      clean:\n        help: Use this target to clean up temporary files\n        args:\n          all:\n            type: bool\n            action: store_true\n            help: Remove all files that are tracked by git\n        run: |\n          echo \"remove file X\"\n      build:\n        help: Build the program\n        args:\n          clean:\n            type: bool\n            action: store_true\n            help: if not set, the clean dependency will not be triggered.\n        dependencies:\n          - target: clean\n            if: ${{ args.clean == true }}\n        run: |\n          echo \"build file x\"\n          echo \"build file y\"\n          echo \"build file z\"\n</code></pre> <p>Some examples of how to use it:</p> <ul> <li> <p>run the <code>build</code> target: <code>makim build</code></p> </li> <li> <p>run the <code>clean</code> target: <code>makim clean</code></p> </li> <li> <p>run the <code>build</code> target with the <code>clean</code> flag: <code>makim build --clean</code></p> </li> </ul> <p>The help menu for the <code>.makim.yaml</code> file would looks like this:</p> <pre><code>$ makim --help\nusage: MakIm [--help] [--version] [--config-file MAKIM_FILE] [target]\n\nMakIm is a tool that helps you to organize and simplify your helper commands.\n\npositional arguments:\n  target\n    Specify the target command to be performed. Options are:\n\n    default:\n    --------\n      default.clean =&gt; Use this target to clean up temporary files\n        ARGS:\n          --all: (bool) Remove all files that are tracked by git\n      default.build =&gt; Build the program\n        ARGS:\n          --clean: (bool) if not set, the clean dependency will not be triggered.\n\noptions:\n  --help, -h\n    Show the help menu\n  --version\n    Show the version of the installed MakIm tool.\n  --config-file MAKIM_FILE\n    Specify a custom location for the config file.\n\nIf you have any problem, open an issue at: https://github.com/osl-incubator/makim\n</code></pre> <p>As you can see, the help menu automatically adds information defined by all the <code>help</code> key, inside the <code>.makim.yaml</code> file.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#1140-2024-03-18","title":"1.14.0 (2024-03-18)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Change the default template tag delimiter (#97) (7037195)</li> </ul>"},{"location":"changelog/#1130-2024-02-16","title":"1.13.0 (2024-02-16)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Allow vars with complex types (list, dict) (#95) (907680e)</li> </ul>"},{"location":"changelog/#1122-2024-02-12","title":"1.12.2 (2024-02-12)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix remove colorama (#94) (3f49a80)</li> </ul>"},{"location":"changelog/#1121-2024-02-09","title":"1.12.1 (2024-02-09)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Improve smoke test organization (#93) (5da1064)</li> </ul>"},{"location":"changelog/#1120-2024-01-30","title":"1.12.0 (2024-01-30)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>suggest probable command (#87) (cbc05aa)</li> </ul>"},{"location":"changelog/#1110-2024-01-18","title":"1.11.0 (2024-01-18)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add support for more shell apps (#84) (bd75fad)</li> </ul>"},{"location":"changelog/#1100-2024-01-12","title":"1.10.0 (2024-01-12)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix distlib installation failure (#72) (f7a9fb7)</li> </ul>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Replace argparse by typer (#82) (614ffd3)</li> </ul>"},{"location":"changelog/#191-2023-12-13","title":"1.9.1 (2023-12-13)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix documentation and add folder for artwork (#70) (2823053)</li> </ul>"},{"location":"changelog/#190-2023-12-08","title":"1.9.0 (2023-12-08)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Add working-directory to the target, group and global scope (#65) (3fbd61e)</li> </ul>"},{"location":"changelog/#183-2023-08-15","title":"1.8.3 (2023-08-15)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>deps: Fix the dependencies pinning (#54) (1038ec3)</li> </ul>"},{"location":"changelog/#182-2023-07-20","title":"1.8.2 (2023-07-20)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Trigger release for the latest refactoring commits (077479c)</li> </ul>"},{"location":"changelog/#181-2023-05-21","title":"1.8.1 (2023-05-21)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fix the rendering flow of env, vars and args (#41) (3235d98)</li> </ul>"},{"location":"changelog/#180-2023-05-19","title":"1.8.0 (2023-05-19)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>by default, for Xonsh shell, stop the target process if any command line fails (#19) (8fa4c1d)</li> </ul>"},{"location":"changelog/#171-2023-05-19","title":"1.7.1 (2023-05-19)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix release workflow and broken dependencies (#40) (c77c6f9), closes /github.com/ionrock/cachecontrol/issues/292#issuecomment-1536120527</li> </ul>"},{"location":"changelog/#170-2023-05-19","title":"1.7.0 (2023-05-19)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Increase coverage of the env and env-file options for global, group and target scope (#39) (2481221)</li> </ul>"},{"location":"changelog/#167-2023-04-22","title":"1.6.7 (2023-04-22)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Break bash target when any line fails (#37) (9dab0f4)</li> </ul>"},{"location":"changelog/#166-2023-04-07","title":"1.6.6 (2023-04-07)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fix both --version usage and the required property for arguments (#35) (3bc20e1)</li> </ul>"},{"location":"changelog/#165-2023-04-05","title":"1.6.5 (2023-04-05)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fix nested commands (#34) (790d2ba)</li> </ul>"},{"location":"changelog/#164-2023-03-21","title":"1.6.4 (2023-03-21)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>groups: change groups to accept dict instead of list &amp;&amp; improve help cmd (#28) (a6b1672)</li> </ul>"},{"location":"changelog/#163-2023-03-11","title":"1.6.3 (2023-03-11)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fix conditional parameter when --verbose is not given (#27) (e715268)</li> </ul>"},{"location":"changelog/#162-2023-03-08","title":"1.6.2 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Fix the mechanism for killing child processes when CTRL+C is pressed (#25) (00a9aff)</li> </ul>"},{"location":"changelog/#161-2023-03-08","title":"1.6.1 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix IF statement and arguments used by dependencies (#24) (e03886e)</li> </ul>"},{"location":"changelog/#160-2023-02-26","title":"1.6.0 (2023-02-26)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add support for user defined shell app (#22) (dd4a7db)</li> </ul>"},{"location":"changelog/#150-2023-02-08","title":"1.5.0 (2023-02-08)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add required argument option (#16) (dc79486)</li> </ul>"},{"location":"changelog/#140-2023-02-07","title":"1.4.0 (2023-02-07)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add support to dot env file in the top level in the makim file (#15) (ee07cdb)</li> </ul>"},{"location":"changelog/#130-2023-02-05","title":"1.3.0 (2023-02-05)","text":""},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Add dependency argument (#13) (7f28c68)</li> </ul>"},{"location":"changelog/#120-2023-02-03","title":"1.2.0 (2023-02-03)","text":""},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add initial support for arguments (#11) (4d105d0)</li> </ul>"},{"location":"changelog/#111-2023-02-03","title":"1.1.1 (2023-02-03)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix release workflow (#10) (39146bb)</li> </ul>"},{"location":"changelog/#110-2023-02-03","title":"1.1.0 (2023-02-03)","text":""},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add support for variables for the target group (#9) (e3aa389)</li> </ul>"},{"location":"changelog/#102-2023-01-26","title":"1.0.2 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fix support for Python 3.7.1, 3.8, 3.9, 3.10 (#7) (418f3de)</li> </ul>"},{"location":"changelog/#101-2023-01-25","title":"1.0.1 (2023-01-25)","text":""},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Suppress the sh traceback message error (#5) (dc3f4ad)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Your contributions are valued and play a significant role in the continuous improvement of Makim. We welcome contributions of all forms and acknowledge all efforts.</p>"},{"location":"contributing/#how-you-can-contribute","title":"How You Can Contribute","text":"<p>Contributions can be made in various ways, outlined below:</p>"},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>If you encounter a bug in Makim, please report it via our GitHub issues page at: https://github.com/osl-incubator/makim/issues.</p> <p>When reporting a bug, kindly include the following information to aid in the issue's resolution:</p> <ul> <li>The name and version of your operating system.</li> <li>Any relevant details about your setup that might assist in diagnosing the   issue.</li> <li>A step-by-step guide to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>You can contribute by fixing bugs identified in the GitHub issues. Issues tagged with both \"bug\" and \"help wanted\" are available for anyone to work on.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Feature development is another way to contribute. Review the GitHub issues for requested features. Issues labeled with \"enhancement\" and \"help wanted\" are open for implementation.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>There's always a need for more documentation for Makim. This could be through enhancing the official documentation, contributing to docstrings, or sharing knowledge via blog posts, articles, and other media.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>Feedback is crucial for project improvement. To submit feedback or propose a feature:</p> <ul> <li>File an issue at   https://github.com/osl-incubator/makim/issues.</li> <li>For feature proposals, please provide a detailed explanation of how the   feature would function, aim for a narrow scope to facilitate easier   implementation, and remember, Makim is a volunteer-driven project, and we   welcome contributions.</li> </ul>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>Before you begin contributing to the Makim project, there are several technical prerequisites and best practices you should be familiar with. This section outlines the key requirements to ensure a smooth and productive contribution process.</p>"},{"location":"contributing/#conda-environment","title":"Conda Environment","text":"<p>Conda is a versatile tool that provides package, dependency, and environment management for various programming languages. In the Makim project, we leverage Conda to manage virtual environments and package dependencies effectively.</p> <ul> <li>Environment Setup: We strongly advise using a Conda environment while   working with Makim. If Conda is not installed on your system, you can download   it from Miniforge. For an   introductory overview of Conda, consider watching this   Conda Basics video.</li> <li>Best Practices: Avoid installing packages in the base Conda environment.   Always create and activate a new environment for each project to prevent   dependency conflicts and ensure a clean workspace.</li> </ul>"},{"location":"contributing/#git","title":"Git","text":"<p>Our collaborative efforts are facilitated through Git and GitHub. Understanding the fundamentals of Git is crucial for effective participation.</p> <ul> <li>Learning Resources: If you're new to Git, we recommend starting with the   Software Carpentry Git Lesson,   which covers essential Git concepts and workflows.</li> <li>Quick Reference: For a concise summary of common Git commands, refer to   this   Git Cheat Sheet   provided by GitHub.</li> <li>Configuration Tips:</li> <li>To streamline your workflow, configure Git to use <code>rebase</code> by default for     pulling changes with <code>git config --global pull.rebase true</code>.</li> <li>Familiarize yourself with the <code>git rebase</code> command for updating branches     from a remote repository. Although more complex, it is preferred over the     default merge commit strategy. For an in-depth explanation, visit     Atlassian's guide on merging vs. rebasing.</li> <li>Workflow: The standard open-source development workflow includes forking a   repository, cloning the fork locally, and configuring an <code>upstream</code> remote for   the original repository. Detailed instructions can be found in   GitHub's guide to configuring a remote for a fork.</li> </ul>"},{"location":"contributing/#python","title":"Python","text":"<p>Familiarity with Python and adherence to best practices is important for contributing to Makim.</p> <ul> <li>Style Guide: Follow the PEP 8 style guide for Python code, available at   PEP8.</li> <li>Best Practices: pyOpenSci offers a comprehensive guide for writing Python   packages, which can be found   here.</li> <li>Advanced Learning: To deepen your understanding of Python and general   programming concepts, consider enrolling in the   Design of Computer Programs   course on Udacity. Though challenging and based on Python 2, it provides   valuable insights into advanced Python usage and computer programming   principles.</li> </ul>"},{"location":"contributing/#how-to-get-support","title":"How to Get Support","text":"<p>Should you require assistance, please join our community on the Open Science Labs Discord server at https://opensciencelabs.org/discord. Here, you can participate in the incubator program and ask questions about Makim in its dedicated channel. You are also welcome to explore and join other groups that align with your interests.</p>"},{"location":"contributing/#setting-up-for-local-development","title":"Setting Up for Local Development","text":"<p>To contribute to <code>makim</code>, follow these steps to set up your development environment:</p> <ol> <li> <p>Fork the Repository: Begin by forking the <code>makim</code> repository on GitHub to    your own account.</p> </li> <li> <p>Clone Your Fork Locally: Clone the forked repository to your local    machine and navigate into the project directory.</p> </li> </ol> <pre><code>$ git clone git@github.com:your_username/makim.git\n$ cd makim\n</code></pre> <ol> <li>Install Dependencies: Use <code>mamba</code> to create a Conda environment and    <code>poetry</code> for managing Python dependencies.</li> </ol> <pre><code>$ mamba env create --file conda/dev.yaml --force\n$ poetry config virtualenvs.create false\n$ poetry install\n</code></pre> <ol> <li>Create a Development Branch: Make a dedicated branch for your bugfix or    feature.</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make Changes Locally: You are now ready to implement your changes or    improvements.</p> </li> <li> <p>Install and Use Pre-commit Hooks: <code>makim</code> utilizes <code>pre-commit</code> hooks to    ensure code quality. Install them locally and they will automatically run on    each commit.</p> </li> </ol> <pre><code>$ pre-commit install\n$ pre-commit run --all-files\n</code></pre> <p>To bypass the hooks temporarily, use <code>git commit</code> with <code>--no-verify</code>.</p> <ol> <li>Run Smoke Tests: Quickly validate the functionality of your changes with    smoke tests.</li> </ol> <pre><code>$ makim tests.smoke\n</code></pre> <p>Always complement smoke tests with thorough unit testing to ensure code    integrity.</p> <ol> <li>Unit Testing with <code>pytest</code>: <code>makim</code> leverages <code>pytest</code> for unit testing,    along with <code>pytest-cov</code> for coverage analysis. Run unit tests using:</li> </ol> <pre><code>$ python -m pytest\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest\n</code></pre> <ol> <li>Commit and Push Changes: Stage, commit, and push your changes to GitHub.    After setting the upstream branch once, subsequent pushes only require    <code>git push</code>.</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Detailed description of your changes.\"\n$ git push --set-upstream origin &lt;branch name&gt;\n</code></pre> <ol> <li>Submit a Pull Request: Once your changes are pushed, go to the GitHub     website to submit a pull request for review.</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>The Makim project utilizes <code>semantic-release</code> to automate the release process, basing new releases on the content of commit messages.</p>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<p><code>semantic-release</code> analyzes commit messages to assess the impact of changes made to the codebase. Adhering to a standardized commit message format allows <code>semantic-release</code> to automatically determine the next semantic version number, generate a comprehensive changelog, and publish the release.</p> <p>While <code>semantic-release</code> defaults to the Angular Commit Message Conventions, Makim adopts the \"Conventional Commits\" standard (https://www.conventionalcommits.org/en/v1.0.0/). This standard facilitates more detailed commit messages, especially for \"breaking changes\".</p> <p>Given the project's use of the <code>squash and merge</code> strategy for merging pull requests, it is crucial to format the PR title according to the commit message standards.</p> <p>To aid contributors in crafting compliant commit messages, tools like commitizen and commitlint are recommended. These tools help ensure that commit messages adhere to the required format.</p> <p>The following table illustrates how different commit messages correspond to the type of release generated by <code>semantic-release</code>, according to its default configuration:</p> Commit Message Example Release Type <code>fix(pencil): stop graphite breaking when too much pressure</code> Patch Release <code>feat(pencil): add 'graphiteWidth' option</code> Minor Release <code>perf(pencil): optimize 'graphiteWidth' calculation</code> Patch Release <code>fix(pencil)!: 'graphiteWidth' option removed</code> Major Release <p>Note: Within the Conventional Commits standard, appending <code>!</code> to the message prefix indicates a breaking change.</p> <p>For more details on the commit message format used by <code>semantic-release</code>, visit the semantic-release documentation.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#attribute-working-directory","title":"Attribute: working-directory","text":"<p>The working-directory feature in Makim allows users to define the directory from which commands associated with specific targets or groups are executed. This provides greater flexibility and control over the execution environment.</p> <p>The <code>working-directory</code> attribute can be specified at three different scopes: global, group, and target. It allows users to set the working directory for a specific target, a group of targets, or globally.</p>"},{"location":"features/#syntax-and-scopes","title":"Syntax and Scopes","text":"<p>The working-directory attribute can be applied to three different scopes:</p> <p>Setting the global working directory impacts all targets and groups in the   Makim configuration.</p> <pre><code>version: 1.0\nworking-directory: /path/to/global/directory\n# ... other configuration ...\n</code></pre> <p>Setting the working directory at the group scope affects all targets within   that group.</p> <pre><code>version: 1.0\n\ngroups:\n  my-group:\n    working-directory: /path/to/group/directory\n    targets:\n      target-1:\n        run: |\n        # This target will run with the working directory set to\n        # /path/to/group/directory\n</code></pre> <p>Setting the working directory at the target scope allows for fine grained   control over individual targets.</p> <pre><code>version: 1.0\ngroups:\n  my-group:\n    targets:\n      my-target:\n        working-directory: /path/to/target/directory\n        run: |\n        # This target will run with the working directory set to\n        # /path/to/target/directory\n</code></pre>"},{"location":"features/#global-scope","title":"Global Scope","text":""},{"location":"features/#group-scope","title":"Group Scope","text":""},{"location":"features/#target-scope","title":"Target Scope","text":""},{"location":"features/#example","title":"Example","text":"<pre><code>version: 1.0\nworking-directory: /project-root\n\ngroups:\n  backend:\n    working-directory: backend\n    targets:\n      build:\n        help: Build the backend services\n        working-directory: services\n        run: |\n          echo \"Building backend services...\"\n          # Additional build commands specific to the backend\n\n      test:\n        help: Run backend tests\n        working-directory: tests\n        run: |\n          echo \"Running backend tests...\"\n          # Additional test commands specific to the backend\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install makim, run this command in your terminal:</p> <pre><code>$ pip install makim\n</code></pre> <p>Makim is also available on conda-forge:</p> <pre><code>$ conda install -c conda-forge makim\n</code></pre> <p>This is the preferred method to install makim, as it will always install the most recent stable release.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for makim can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/makim.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/makim.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, change to the project root directory and install it with:</p> <pre><code>$ poetry install\n</code></pre> <p>PS: You need to have poetry installed. You can use it also from a conda environment. Check the <code>Contributing</code> page for more information.</p>"},{"location":"template/","title":"Makim Template","text":"<p>Makim config files are powered by the Jinja2 template engine, allowing you to use Jinja2 tags for added flexibility in your Makim config files.</p> <p>This page focuses on explaining the options offered directly by Makim, rather than covering all the possibilities with Jinja2.</p> <p>Makim provides three different variable options that can be combined: <code>vars</code>, <code>env</code>, and <code>args</code>.</p> <p>Additionally, the <code>env</code> and <code>vars</code> option has three different scopes: global, group, and target. We will discuss each of them in the following sections.</p>"},{"location":"template/#variables-scopes","title":"Variables Scopes","text":"<p>Before delving into the different variable options, let's discuss <code>env</code> and <code>vars</code> scope, as it is essential for the subsequent sections. The <code>args</code> attribute just works in the target scope.</p> <p>As mentioned earlier, Makim <code>env</code> and <code>vars</code> has three scopes: global, group, and target.</p> <p>The order of their rendering is crucial. First, the global scope is processed. In the group scope, any variable defined globally is accessible via the <code>env</code> variable (e.g., <code>${{ env.my_global_env }}</code>). However, any variable defined in the global scope will be overridden by a variable with the same name in the group scope. The same applies to the target scope, where any variable defined in the global or group scope will be overridden by a variable defined in the target scope.</p> <p>Moreover, <code>env</code> is a bit more complex, as its value can be defined in two different ways: either through the <code>env</code> attribute in the <code>.makim.yaml</code> file or from an environment file specified in the <code>env-file</code> attribute. First, the <code>env-file</code> is loaded into memory, and then the variables defined in the <code>env</code> attribute are loaded. In other words, any variable defined in the file for the given <code>env-file</code> will be overridden by a variable of the same name defined in the <code>env</code> attribute. This process also respects the order of scopes.</p> <p>PS: Makim utilizes system environment variables as the initial scope for the variables.</p>"},{"location":"template/#different-variable-options","title":"Different Variable Options","text":"<p>Makim offers three variable options within the <code>makim</code> config file: <code>env</code>, <code>vars</code>, and <code>args</code>.</p> <ul> <li><code>args</code> allows users to pass parameters via the CLI (command line interface).   It can also be used for target dependencies when parameters need to be passed   to the dependency. However, this option is not available in the system context   (the commands executed defined by <code>run</code> attribute), it is only accessible   within the Makim config file.</li> <li><code>vars</code> is a convenient way to define reusable variables in the code. For   example, if you frequently use a command in the <code>run</code> section, you can define   a variable inside <code>vars</code> to make the Makim file more readable. Like <code>args</code>,   this option is not available in the system context; it is only accessible   within the Makim config file.</li> <li><code>env</code> is used to define environment variables. Any environment variable can be   accessed via the <code>env</code> variable in the template (e.g.,   <code>${{ env.myenvvar }}</code>) or directly as an environment   variable within the <code>run</code> section, as shown in the example below:</li> </ul> <pre><code>...\ngroups:\n  group1:\n    targets:\n      target1:\n        ...\n        env:\n          MYVAR: 1\n        run: |\n          echo $MYENV\n</code></pre>"},{"location":"template/#order-of-variable-rendering","title":"Order of Variable Rendering","text":"<p>One crucial point to keep in mind is the order of variable rendering within the Makim config file.</p> <p><code>vars</code> is primarily used for <code>run</code> section, so they have the lowest precedence. In another word, you can use <code>env</code> or <code>arg</code> to create <code>vars</code>, but not the opposite way.</p> <p><code>env</code> however, can be defined also in the system scope, so it has the highest rank in the precedence. So, you shouldn't define a <code>env</code> that depends on a variable defined by <code>vars</code> or <code>args</code>. If you need to set your environment variable with a value from a <code>vars</code> or <code>args</code>, you should do it in the <code>run</code> section.</p> <p>In the following example, it shows a correct way to use all the different options of variables, respecting the scopes and rendering order:</p> <pre><code>---\nenv:\n  MY_GLOBAL_ENV: 1\nvars:\n  MY_GLOBAL_VAR:\n    \"my global env is ${{ env.MY_GLOBAL_ENV }}\"\n\ngroups:\n  group1:\n    help: \"group\"\n    env:\n      MY_GROUP_ENV: 2\n    vars:\n      MY_GROUP_VAR:\n        \"my group env is ${{ env.MY_GROUP_ENV }}\"\n    targets:\n      target1:\n        help: \"target 1\"\n        env:\n          MY_TARGET_ENV: 3\n        args:\n          my-target-arg:\n            help: \"target arg\"\n            type: string\n            default: \"${{ env.MY_TARGET_ENV }}\"\n        vars:\n          MY_TARGET_VAR:\n            \"my group env is ${{ env.MY_GROUP_ENV }}\"\n        run: |\n          echo \"${{ env.MY_GLOBAL_ENV}}\"\n          echo \"${{ env.MY_GLOBAL_VAR}}\"\n          echo \"${{ env.MY_GROUP_ENV}}\"\n          echo \"${{ env.MY_GROUP_VAR}}\"\n          echo \"${{ env.MY_TARGET_ENV}}\"\n          echo \"${{ env.MY_TARGET_VAR}}\"\n          echo \"${{ env.my_target_arg}}\"\n</code></pre>"},{"location":"xonsh/","title":"Xonsh Shell Integration","text":"<p>In the context of this project, Xonsh serves as the default shell for executing commands defined in the Makim configuration. By leveraging Xonsh, the Makim tool gains the flexibility and richness of the Python programming language within a command-line interface. This integration allows users to create sophisticated tasks and harness the full power of Python directly in the terminal.</p>"},{"location":"xonsh/#what-is-xonsh","title":"What is Xonsh?","text":"<p>Xonsh is a powerful shell language and command prompt designed to seamlessly blend traditional shell capabilities with the expressive syntax of Python. It offers an interactive and extensible environment that enables users to transition effortlessly between standard shell commands and Python scripting.</p>"},{"location":"xonsh/#key-features-and-commands-in-xonsh","title":"Key Features and Commands in Xonsh","text":"<ol> <li>Unified Syntax : Xonsh seamlessly integrates traditional shell syntax    with Python's clean and expressive syntax, creating a unified and consistent    scripting experience.</li> </ol> <pre><code># Shell-style command\nls -l\n# Python-style variable assignment\n$filename = \"example.txt\"\n# Combining both in a single command\necho \"The contents of $filename are: $(cat $filename)\"\n</code></pre> <ol> <li>Python Variables and Expressions : Python variables can be easily    incorporated into commands, enhancing the readability and flexibility of your    scripts.</li> </ol> <pre><code>$filename = \"example.txt\"\necho \"The filename is $filename\"\n</code></pre> <ol> <li>Looping and Conditional Statements : Use Python-style loops and    conditionals to create dynamic and complex command sequences.</li> </ol> <pre><code>for $i in range(3):\n    echo \"Iteration $i\"\n</code></pre> <ol> <li>Extensible Tab Completion : Xonsh offers extensible and intelligent tab    completion, making it easier to discover and complete commands and variables.</li> </ol> <pre><code>$long_variable_name = \"some_value\"\necho $long_&lt;TAB&gt;\n# Xonsh will intelligently complete the variable name\n</code></pre> <p>For more comprehensive information and documentation, explore the [Xonsh GitHub repository] (xonsh/xonsh) and the official Xonsh website.</p>"}]}