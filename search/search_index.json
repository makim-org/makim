{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MakIm MakIm or just makim is based on make and focus on improve the way to define targets and dependencies. Instead of using the Makefile format, it uses yaml format. The idea of this project is to offer a way to define targets and dependencies with some control options, like conditionals if . It allows a very easy way to define texts for documentation and extra parameters for each target. Free software: BSD 3 Clause Documentation: https://osl-incubator.github.io/makim Features Help text as first-class in the .makim.yaml specification. It can be used by targets and arguments. Targets have an option for arguments. Targets have an option for dependencies. Dependencies can call a target with specific arguments. Dependencies can have a conditional control flow ( if ). Allow the creation of groups, so the targets can be organized by topics. Targets and groups have an option for user defined variables and/or environment variables. Access arguments, variables or environment variables via template (using Jinja2). Option for using dot environment files using env-file key. How to use it First you need to place the config file .makim.yaml in the root of your project. This is an example of a configuration file: version : 1.0.0 groups : - name : default env-file : .env targets : clean : help : Use this target to clean up temporary files args : all : type : bool action : store_true help : Remove all files that are tracked by git run : | echo \"remove file X\" build : help : Build the program args : clean : type : bool action : store_true help : if not set, the clean dependency will not be triggered. dependencies : - target : clean if : \\${\\{ args.clean == true \\}\\} run : | echo \"build file x\" echo \"build file y\" echo \"build file z\" PS: in \\${\\{ args.clean == true \\}\\} , this \\ is just for escaping it for the documentation here, you should use it with no escape \\ . Some examples of how to use it: run the build target: makim build run the clean target: makim clean run the build target with the clean flag: makim build --clean The help menu for the .makim.yaml file would looks like this: $ makim --help usage: MakIm [--help] [--version] [--config-file MAKIM_FILE] [target] MakIm is a tool that helps you to organize and simplify your helper commands. positional arguments: target Specify the target command to be performed. Options are: default.clean => Use this target to clean up temporary files ARGS: --all: (bool) Remove all files that are tracked by git default.build => Build the program ARGS: --clean: (bool) if not set, the clean dependency will not be triggered. NOTE: 'default.' prefix is optional. options: --help, -h Show the help menu --version Show the version of the installed MakIm tool. --config-file MAKIM_FILE Specify a custom location for the config file. If you have any problem, open an issue at: https://github.com/osl-incubator/makim As you can see, the help menu automatically adds information defined by all the help key, inside the .makim.yaml file.","title":"MakIm"},{"location":"#makim","text":"MakIm or just makim is based on make and focus on improve the way to define targets and dependencies. Instead of using the Makefile format, it uses yaml format. The idea of this project is to offer a way to define targets and dependencies with some control options, like conditionals if . It allows a very easy way to define texts for documentation and extra parameters for each target. Free software: BSD 3 Clause Documentation: https://osl-incubator.github.io/makim","title":"MakIm"},{"location":"#features","text":"Help text as first-class in the .makim.yaml specification. It can be used by targets and arguments. Targets have an option for arguments. Targets have an option for dependencies. Dependencies can call a target with specific arguments. Dependencies can have a conditional control flow ( if ). Allow the creation of groups, so the targets can be organized by topics. Targets and groups have an option for user defined variables and/or environment variables. Access arguments, variables or environment variables via template (using Jinja2). Option for using dot environment files using env-file key.","title":"Features"},{"location":"#how-to-use-it","text":"First you need to place the config file .makim.yaml in the root of your project. This is an example of a configuration file: version : 1.0.0 groups : - name : default env-file : .env targets : clean : help : Use this target to clean up temporary files args : all : type : bool action : store_true help : Remove all files that are tracked by git run : | echo \"remove file X\" build : help : Build the program args : clean : type : bool action : store_true help : if not set, the clean dependency will not be triggered. dependencies : - target : clean if : \\${\\{ args.clean == true \\}\\} run : | echo \"build file x\" echo \"build file y\" echo \"build file z\" PS: in \\${\\{ args.clean == true \\}\\} , this \\ is just for escaping it for the documentation here, you should use it with no escape \\ . Some examples of how to use it: run the build target: makim build run the clean target: makim clean run the build target with the clean flag: makim build --clean The help menu for the .makim.yaml file would looks like this: $ makim --help usage: MakIm [--help] [--version] [--config-file MAKIM_FILE] [target] MakIm is a tool that helps you to organize and simplify your helper commands. positional arguments: target Specify the target command to be performed. Options are: default.clean => Use this target to clean up temporary files ARGS: --all: (bool) Remove all files that are tracked by git default.build => Build the program ARGS: --clean: (bool) if not set, the clean dependency will not be triggered. NOTE: 'default.' prefix is optional. options: --help, -h Show the help menu --version Show the version of the installed MakIm tool. --config-file MAKIM_FILE Specify a custom location for the config file. If you have any problem, open an issue at: https://github.com/osl-incubator/makim As you can see, the help menu automatically adds information defined by all the help key, inside the .makim.yaml file.","title":"How to use it"},{"location":"changelog/","text":"Release Notes 1.6.6 (2023-04-07) Bug Fixes Fix both --version usage and the required property for arguments ( #35 ) ( 3bc20e1 ) 1.6.5 (2023-04-05) Bug Fixes Fix nested commands ( #34 ) ( 790d2ba ) 1.6.4 (2023-03-21) Bug Fixes groups: change groups to accept dict instead of list && improve help cmd ( #28 ) ( a6b1672 ) 1.6.3 (2023-03-11) Bug Fixes Fix conditional parameter when --verbose is not given ( #27 ) ( e715268 ) 1.6.2 (2023-03-08) Bug Fixes Fix the mechanism for killing child processes when CTRL+C is pressed ( #25 ) ( 00a9aff ) 1.6.1 (2023-03-08) Bug Fixes Fix IF statement and arguments used by dependencies ( #24 ) ( e03886e ) 1.6.0 (2023-02-26) Features Add support for user defined shell app ( #22 ) ( dd4a7db ) 1.5.0 (2023-02-08) Features Add required argument option ( #16 ) ( dc79486 ) 1.4.0 (2023-02-07) Features Add support to dot env file in the top level in the makim file ( #15 ) ( ee07cdb ) 1.3.0 (2023-02-05) Features Add dependency argument ( #13 ) ( 7f28c68 ) 1.2.0 (2023-02-03) Features Add initial support for arguments ( #11 ) ( 4d105d0 ) 1.1.1 (2023-02-03) Bug Fixes Fix release workflow ( #10 ) ( 39146bb ) 1.1.0 (2023-02-03) Features Add support for variables for the target group ( #9 ) ( e3aa389 ) 1.0.2 (2023-01-26) Bug Fixes Fix support for Python 3.7.1, 3.8, 3.9, 3.10 ( #7 ) ( 418f3de ) 1.0.1 (2023-01-25) Bug Fixes Suppress the sh traceback message error ( #5 ) ( dc3f4ad )","title":"Release Notes"},{"location":"changelog/#release-notes","text":"","title":"Release Notes"},{"location":"changelog/#166-2023-04-07","text":"","title":"1.6.6 (2023-04-07)"},{"location":"changelog/#bug-fixes","text":"Fix both --version usage and the required property for arguments ( #35 ) ( 3bc20e1 )","title":"Bug Fixes"},{"location":"changelog/#165-2023-04-05","text":"","title":"1.6.5 (2023-04-05)"},{"location":"changelog/#bug-fixes_1","text":"Fix nested commands ( #34 ) ( 790d2ba )","title":"Bug Fixes"},{"location":"changelog/#164-2023-03-21","text":"","title":"1.6.4 (2023-03-21)"},{"location":"changelog/#bug-fixes_2","text":"groups: change groups to accept dict instead of list && improve help cmd ( #28 ) ( a6b1672 )","title":"Bug Fixes"},{"location":"changelog/#163-2023-03-11","text":"","title":"1.6.3 (2023-03-11)"},{"location":"changelog/#bug-fixes_3","text":"Fix conditional parameter when --verbose is not given ( #27 ) ( e715268 )","title":"Bug Fixes"},{"location":"changelog/#162-2023-03-08","text":"","title":"1.6.2 (2023-03-08)"},{"location":"changelog/#bug-fixes_4","text":"Fix the mechanism for killing child processes when CTRL+C is pressed ( #25 ) ( 00a9aff )","title":"Bug Fixes"},{"location":"changelog/#161-2023-03-08","text":"","title":"1.6.1 (2023-03-08)"},{"location":"changelog/#bug-fixes_5","text":"Fix IF statement and arguments used by dependencies ( #24 ) ( e03886e )","title":"Bug Fixes"},{"location":"changelog/#160-2023-02-26","text":"","title":"1.6.0 (2023-02-26)"},{"location":"changelog/#features","text":"Add support for user defined shell app ( #22 ) ( dd4a7db )","title":"Features"},{"location":"changelog/#150-2023-02-08","text":"","title":"1.5.0 (2023-02-08)"},{"location":"changelog/#features_1","text":"Add required argument option ( #16 ) ( dc79486 )","title":"Features"},{"location":"changelog/#140-2023-02-07","text":"","title":"1.4.0 (2023-02-07)"},{"location":"changelog/#features_2","text":"Add support to dot env file in the top level in the makim file ( #15 ) ( ee07cdb )","title":"Features"},{"location":"changelog/#130-2023-02-05","text":"","title":"1.3.0 (2023-02-05)"},{"location":"changelog/#features_3","text":"Add dependency argument ( #13 ) ( 7f28c68 )","title":"Features"},{"location":"changelog/#120-2023-02-03","text":"","title":"1.2.0 (2023-02-03)"},{"location":"changelog/#features_4","text":"Add initial support for arguments ( #11 ) ( 4d105d0 )","title":"Features"},{"location":"changelog/#111-2023-02-03","text":"","title":"1.1.1 (2023-02-03)"},{"location":"changelog/#bug-fixes_6","text":"Fix release workflow ( #10 ) ( 39146bb )","title":"Bug Fixes"},{"location":"changelog/#110-2023-02-03","text":"","title":"1.1.0 (2023-02-03)"},{"location":"changelog/#features_5","text":"Add support for variables for the target group ( #9 ) ( e3aa389 )","title":"Features"},{"location":"changelog/#102-2023-01-26","text":"","title":"1.0.2 (2023-01-26)"},{"location":"changelog/#bug-fixes_7","text":"Fix support for Python 3.7.1, 3.8, 3.9, 3.10 ( #7 ) ( 418f3de )","title":"Bug Fixes"},{"location":"changelog/#101-2023-01-25","text":"","title":"1.0.1 (2023-01-25)"},{"location":"changelog/#bug-fixes_8","text":"Suppress the sh traceback message error ( #5 ) ( dc3f4ad )","title":"Bug Fixes"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/osl-incubator/makim.git/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it. Write Documentation makim could always use more documentation, whether as part of the official makim docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/osl-incubator/makim.git/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! For development, we encourage you to use conda . If you don't know what is that, check these links: In Spanish: https://opensciencelabs.org/blog/como-instalar-y-comenzar-utilizar-conda/ In English: https://cloudsmith.com/blog/what-is-conda/ We recommend you to use mamba-forge, a combination of miniconda + conda-forge + mamba. You can download it from here: conda-forge/miniforge#mambaforge Ready to contribute? Here\u2019s how to set up makim for local development. Fork the makim repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/makim.git Create a conda environment and activate it: $ mamba env create --file conda/dev.yaml and $ conda activate makim Install your local project copy into your conda environment: $ poetry install Create a branch for local development:: $ git checkout -b name-of-your-bugfix-or-feature When you\u2019re done makimg changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:: $ makim lint $ makim test Commit your changes and push your branch to GitHub:: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python >= 3.8. Tips To run a subset of tests:: $ pytest tests.test_containers_sugar Release This project uses semantic-release in order to cut a new release based on the commit-message. Commit message format semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release. By default, semantic-release uses Angular Commit Message Conventions . The commit message format can be changed with the preset or config options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins. Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages. The table below shows which commit message gets you which release type when semantic-release runs (using the default configuration): Commit message Release type fix(pencil): stop graphite breaking when pressure is applied Fix Release feat(pencil): add 'graphiteWidth' option Feature Release perf(pencil): remove graphiteWidth option Chore BREAKING CHANGE: The graphiteWidth option has been removed Breaking Release source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format As this project uses the squash and merge strategy, ensure to apply the commit message format to the PR's title.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/osl-incubator/makim.git/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"makim could always use more documentation, whether as part of the official makim docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/osl-incubator/makim.git/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"For development, we encourage you to use conda . If you don't know what is that, check these links: In Spanish: https://opensciencelabs.org/blog/como-instalar-y-comenzar-utilizar-conda/ In English: https://cloudsmith.com/blog/what-is-conda/ We recommend you to use mamba-forge, a combination of miniconda + conda-forge + mamba. You can download it from here: conda-forge/miniforge#mambaforge Ready to contribute? Here\u2019s how to set up makim for local development. Fork the makim repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/makim.git Create a conda environment and activate it: $ mamba env create --file conda/dev.yaml and $ conda activate makim Install your local project copy into your conda environment: $ poetry install Create a branch for local development:: $ git checkout -b name-of-your-bugfix-or-feature When you\u2019re done makimg changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox:: $ makim lint $ makim test Commit your changes and push your branch to GitHub:: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python >= 3.8.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests:: $ pytest tests.test_containers_sugar","title":"Tips"},{"location":"contributing/#release","text":"This project uses semantic-release in order to cut a new release based on the commit-message.","title":"Release"},{"location":"contributing/#commit-message-format","text":"semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release. By default, semantic-release uses Angular Commit Message Conventions . The commit message format can be changed with the preset or config options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins. Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages. The table below shows which commit message gets you which release type when semantic-release runs (using the default configuration): Commit message Release type fix(pencil): stop graphite breaking when pressure is applied Fix Release feat(pencil): add 'graphiteWidth' option Feature Release perf(pencil): remove graphiteWidth option Chore BREAKING CHANGE: The graphiteWidth option has been removed Breaking Release source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format As this project uses the squash and merge strategy, ensure to apply the commit message format to the PR's title.","title":"Commit message format"},{"location":"installation/","text":"Installation Stable release To install makim, run this command in your terminal: $ pip install makim This is the preferred method to install makim, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources The sources for makim can be downloaded from the Github repo . You can either clone the public repository: $ git clone https://github.com/osl-incubator/makim.git Or download the tarball : $ curl -OJL https://github.com/osl-incubator/makim.git/tarball/main Once you have a copy of the source, change to the project root directory and install it with: $ poetry install PS: You need to have poetry installed. You can use it also from a conda environment. Check the Contributing page for more information.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install makim, run this command in your terminal: $ pip install makim This is the preferred method to install makim, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-sources","text":"The sources for makim can be downloaded from the Github repo . You can either clone the public repository: $ git clone https://github.com/osl-incubator/makim.git Or download the tarball : $ curl -OJL https://github.com/osl-incubator/makim.git/tarball/main Once you have a copy of the source, change to the project root directory and install it with: $ poetry install PS: You need to have poetry installed. You can use it also from a conda environment. Check the Contributing page for more information.","title":"From sources"}]}