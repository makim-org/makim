{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p><code>MakIm</code> or just <code>makim</code> is based on <code>make</code> and focus on improve the way to define targets and dependencies. Instead of using the <code>Makefile</code> format, it uses <code>yaml</code> format.</p> <p>The idea of this project is to offer a way to define targets and dependencies with some control options, like conditionals <code>if</code>.</p> <p>It allows a very easy way to define texts for documentation and extra parameters for each target.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.github.io/makim</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Help text as first-class in the <code>.makim.yaml</code> specification. It can be used by   targets and arguments.</li> <li>Targets have an option for arguments.</li> <li>Targets have an option for dependencies.</li> <li>Dependencies can call a target with specific arguments.</li> <li>Dependencies can have a conditional control flow (<code>if</code>).</li> <li>Allow the creation of groups, so the targets can be organized by topics.</li> <li>Targets and groups have an option for user defined variables and/or   environment variables.</li> <li>Access arguments, variables or environment variables via template (using   Jinja2).</li> <li>Option for using dot environment files using <code>env-file</code> key.</li> </ul>"},{"location":"#how-to-use-it","title":"How to use it","text":"<p>First you need to place the config file <code>.makim.yaml</code> in the root of your project. This is an example of a configuration file:</p> <pre><code>version: 1.0.0\ngroups:\n  default:\n    env-file: .env\n    targets:\n      clean:\n        help: Use this target to clean up temporary files\n        args:\n          all:\n            type: bool\n            action: store_true\n            help: Remove all files that are tracked by git\n        run: |\n          echo \"remove file X\"\n      build:\n        help: Build the program\n        args:\n          clean:\n            type: bool\n            action: store_true\n            help: if not set, the clean dependency will not be triggered.\n        dependencies:\n          - target: clean\n            if: {{ args.clean == true }}\n        run: |\n          echo \"build file x\"\n          echo \"build file y\"\n          echo \"build file z\"\n</code></pre> <p>Some examples of how to use it:</p> <ul> <li> <p>run the <code>build</code> target: <code>makim build</code></p> </li> <li> <p>run the <code>clean</code> target: <code>makim clean</code></p> </li> <li> <p>run the <code>build</code> target with the <code>clean</code> flag: <code>makim build --clean</code></p> </li> </ul> <p>The help menu for the <code>.makim.yaml</code> file would looks like this:</p> <pre><code>$ makim --help\nusage: MakIm [--help] [--version] [--config-file MAKIM_FILE] [target]\n\nMakIm is a tool that helps you to organize and simplify your helper commands.\n\npositional arguments:\n  target\n    Specify the target command to be performed. Options are:\n\n    default:\n    --------\n      default.clean =&gt; Use this target to clean up temporary files\n        ARGS:\n          --all: (bool) Remove all files that are tracked by git\n      default.build =&gt; Build the program\n        ARGS:\n          --clean: (bool) if not set, the clean dependency will not be triggered.\n\noptions:\n  --help, -h\n    Show the help menu\n  --version\n    Show the version of the installed MakIm tool.\n  --config-file MAKIM_FILE\n    Specify a custom location for the config file.\n\nIf you have any problem, open an issue at: https://github.com/osl-incubator/makim\n</code></pre> <p>As you can see, the help menu automatically adds information defined by all the <code>help</code> key, inside the <code>.makim.yaml</code> file.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#1121-2024-02-09","title":"1.12.1 (2024-02-09)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Improve smoke test organization (#93) (5da1064)</li> </ul>"},{"location":"changelog/#1120-2024-01-30","title":"1.12.0 (2024-01-30)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>suggest probable command (#87) (cbc05aa)</li> </ul>"},{"location":"changelog/#1110-2024-01-18","title":"1.11.0 (2024-01-18)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add support for more shell apps (#84) (bd75fad)</li> </ul>"},{"location":"changelog/#1100-2024-01-12","title":"1.10.0 (2024-01-12)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix distlib installation failure (#72) (f7a9fb7)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Replace argparse by typer (#82) (614ffd3)</li> </ul>"},{"location":"changelog/#191-2023-12-13","title":"1.9.1 (2023-12-13)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix documentation and add folder for artwork (#70) (2823053)</li> </ul>"},{"location":"changelog/#190-2023-12-08","title":"1.9.0 (2023-12-08)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add working-directory to the target, group and global scope (#65) (3fbd61e)</li> </ul>"},{"location":"changelog/#183-2023-08-15","title":"1.8.3 (2023-08-15)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>deps: Fix the dependencies pinning (#54) (1038ec3)</li> </ul>"},{"location":"changelog/#182-2023-07-20","title":"1.8.2 (2023-07-20)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Trigger release for the latest refactoring commits (077479c)</li> </ul>"},{"location":"changelog/#181-2023-05-21","title":"1.8.1 (2023-05-21)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix the rendering flow of env, vars and args (#41) (3235d98)</li> </ul>"},{"location":"changelog/#180-2023-05-19","title":"1.8.0 (2023-05-19)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>by default, for Xonsh shell, stop the target process if any command line fails (#19) (8fa4c1d)</li> </ul>"},{"location":"changelog/#171-2023-05-19","title":"1.7.1 (2023-05-19)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fix release workflow and broken dependencies (#40) (c77c6f9), closes /github.com/ionrock/cachecontrol/issues/292#issuecomment-1536120527</li> </ul>"},{"location":"changelog/#170-2023-05-19","title":"1.7.0 (2023-05-19)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Increase coverage of the env and env-file options for global, group and target scope (#39) (2481221)</li> </ul>"},{"location":"changelog/#167-2023-04-22","title":"1.6.7 (2023-04-22)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Break bash target when any line fails (#37) (9dab0f4)</li> </ul>"},{"location":"changelog/#166-2023-04-07","title":"1.6.6 (2023-04-07)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix both --version usage and the required property for arguments (#35) (3bc20e1)</li> </ul>"},{"location":"changelog/#165-2023-04-05","title":"1.6.5 (2023-04-05)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fix nested commands (#34) (790d2ba)</li> </ul>"},{"location":"changelog/#164-2023-03-21","title":"1.6.4 (2023-03-21)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>groups: change groups to accept dict instead of list &amp;&amp; improve help cmd (#28) (a6b1672)</li> </ul>"},{"location":"changelog/#163-2023-03-11","title":"1.6.3 (2023-03-11)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix conditional parameter when --verbose is not given (#27) (e715268)</li> </ul>"},{"location":"changelog/#162-2023-03-08","title":"1.6.2 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fix the mechanism for killing child processes when CTRL+C is pressed (#25) (00a9aff)</li> </ul>"},{"location":"changelog/#161-2023-03-08","title":"1.6.1 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Fix IF statement and arguments used by dependencies (#24) (e03886e)</li> </ul>"},{"location":"changelog/#160-2023-02-26","title":"1.6.0 (2023-02-26)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add support for user defined shell app (#22) (dd4a7db)</li> </ul>"},{"location":"changelog/#150-2023-02-08","title":"1.5.0 (2023-02-08)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add required argument option (#16) (dc79486)</li> </ul>"},{"location":"changelog/#140-2023-02-07","title":"1.4.0 (2023-02-07)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add support to dot env file in the top level in the makim file (#15) (ee07cdb)</li> </ul>"},{"location":"changelog/#130-2023-02-05","title":"1.3.0 (2023-02-05)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add dependency argument (#13) (7f28c68)</li> </ul>"},{"location":"changelog/#120-2023-02-03","title":"1.2.0 (2023-02-03)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add initial support for arguments (#11) (4d105d0)</li> </ul>"},{"location":"changelog/#111-2023-02-03","title":"1.1.1 (2023-02-03)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix release workflow (#10) (39146bb)</li> </ul>"},{"location":"changelog/#110-2023-02-03","title":"1.1.0 (2023-02-03)","text":""},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Add support for variables for the target group (#9) (e3aa389)</li> </ul>"},{"location":"changelog/#102-2023-01-26","title":"1.0.2 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix support for Python 3.7.1, 3.8, 3.9, 3.10 (#7) (418f3de)</li> </ul>"},{"location":"changelog/#101-2023-01-25","title":"1.0.1 (2023-01-25)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Suppress the sh traceback message error (#5) (dc3f4ad)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/osl-incubator/makim.git/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>makim could always use more documentation, whether as part of the official makim docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/osl-incubator/makim.git/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>For development, we encourage you to use <code>conda</code>. If you don't know what is that, check these links:</p> <ul> <li>In Spanish:   https://opensciencelabs.org/blog/como-instalar-y-comenzar-utilizar-conda/</li> <li>In English: https://cloudsmith.com/blog/what-is-conda/</li> </ul> <p>We recommend you to use mamba-forge, a combination of miniconda + conda-forge + mamba. You can download it from here: conda-forge/miniforge#mambaforge</p> <p>Ready to contribute? Here\u2019s how to set up <code>makim</code> for local development.</p> <ol> <li>Fork the <code>makim</code> repo on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/makim.git\n</code></pre> <ol> <li>Create a conda environment and activate it:</li> </ol> <pre><code>$ mamba env create --file conda/dev.yaml\n</code></pre> <p>and</p> <pre><code>$ conda activate makim\n</code></pre> <ol> <li>Install your local project copy into your conda environment:</li> </ol> <pre><code>$ poetry install\n</code></pre> <ol> <li>Create a branch for local development::</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>When you\u2019re done makimg changes, check that your changes pass flake8 and the     tests, including testing other Python versions with tox::</li> </ol> <pre><code>$ makim tests.linter\n$ makim tests.unittest\n$ makim tests.smoke\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub::</li> </ol> <pre><code>$ git add . $ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests::</p> <pre><code>$ pytest tests.test_containers_sugar\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#attribute-working-directory","title":"Attribute: working-directory","text":"<p>The working-directory feature in Makim allows users to define the directory from which commands associated with specific targets or groups are executed. This provides greater flexibility and control over the execution environment.</p> <p>The <code>working-directory</code> attribute can be specified at three different scopes: global, group, and target. It allows users to set the working directory for a specific target, a group of targets, or globally.</p>"},{"location":"features/#syntax-and-scopes","title":"Syntax and Scopes","text":"<p>The working-directory attribute can be applied to three different scopes:</p>"},{"location":"features/#global-scope","title":"Global Scope","text":"<p>Setting the global working directory impacts all targets and groups in the Makim configuration.</p> <pre><code>version: 1.0\nworking-directory: /path/to/global/directory\n\n# ... other configuration ...\n</code></pre>"},{"location":"features/#group-scope","title":"Group Scope","text":"<p>Setting the working directory at the group scope affects all targets within that group.</p> <pre><code>version: 1.0\n\ngroups:\n    my-group:\n        working-directory: /path/to/group/directory\n        targets:\n            target-1:\n                run: |\n                # This target will run with the working directory set to\n                # /path/to/group/directory\n</code></pre>"},{"location":"features/#target-scope","title":"Target Scope","text":"<p>Setting the working directory at the target scope allows for fine grained control over individual targets.</p> <pre><code>version: 1.0\ngroups:\n    my-group:\n        targets:\n            my-target:\n                working-directory: /path/to/target/directory\n                run: |\n                # This target will run with the working directory set to\n                # /path/to/target/directory\n</code></pre>"},{"location":"features/#example","title":"Example","text":"<pre><code>version: 1.0\nworking-directory: /project-root\n\ngroups:\n  backend:\n    working-directory: backend\n    targets:\n      build:\n        help: Build the backend services\n        working-directory: services\n        run: |\n          echo \"Building backend services...\"\n          # Additional build commands specific to the backend\n\n      test:\n        help: Run backend tests\n        working-directory: tests\n        run: |\n          echo \"Running backend tests...\"\n          # Additional test commands specific to the backend\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install makim, run this command in your terminal:</p> <pre><code>$ pip install makim\n</code></pre> <p>Makim is also available on conda-forge:</p> <pre><code>$ conda install -c conda-forge makim\n</code></pre> <p>This is the preferred method to install makim, as it will always install the most recent stable release.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for makim can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/makim.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/makim.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, change to the project root directory and install it with:</p> <pre><code>$ poetry install\n</code></pre> <p>PS: You need to have poetry installed. You can use it also from a conda environment. Check the <code>Contributing</code> page for more information.</p>"},{"location":"template/","title":"Makim Template","text":"<p>Makim config files are powered by the Jinja2 template engine, allowing you to use Jinja2 tags for added flexibility in your Makim config files.</p> <p>This page focuses on explaining the options offered directly by Makim, rather than covering all the possibilities with Jinja2.</p> <p>Makim provides three different variable options that can be combined: <code>vars</code>, <code>env</code>, and <code>args</code>.</p> <p>Additionally, the <code>env</code> and <code>vars</code> option has three different scopes: global, group, and target. We will discuss each of them in the following sections.</p>"},{"location":"template/#variables-scopes","title":"Variables Scopes","text":"<p>Before delving into the different variable options, let's discuss <code>env</code> and <code>vars</code> scope, as it is essential for the subsequent sections. The <code>args</code> attribute just works in the target scope.</p> <p>As mentioned earlier, Makim <code>env</code> and <code>vars</code> has three scopes: global, group, and target.</p> <p>The order of their rendering is crucial. First, the global scope is processed. In the group scope, any variable defined globally is accessible via the <code>env</code> variable (e.g., <code>{{ env.my_global_env }}</code>). However, any variable defined in the global scope will be overridden by a variable with the same name in the group scope. The same applies to the target scope, where any variable defined in the global or group scope will be overridden by a variable defined in the target scope.</p> <p>Moreover, <code>env</code> is a bit more complex, as its value can be defined in two different ways: either through the <code>env</code> attribute in the <code>.makim.yaml</code> file or from an environment file specified in the <code>env-file</code> attribute. First, the <code>env-file</code> is loaded into memory, and then the variables defined in the <code>env</code> attribute are loaded. In other words, any variable defined in the file for the given <code>env-file</code> will be overridden by a variable of the same name defined in the <code>env</code> attribute. This process also respects the order of scopes.</p> <p>PS: Makim utilizes system environment variables as the initial scope for the variables.</p>"},{"location":"template/#different-variable-options","title":"Different Variable Options","text":"<p>Makim offers three variable options within the <code>makim</code> config file: <code>env</code>, <code>vars</code>, and <code>args</code>.</p> <ul> <li><code>args</code> allows users to pass parameters via the CLI (command line interface). It can also be used for target dependencies when parameters need to be passed to the dependency. However, this option is not available in the system context (the commands executed defined by <code>run</code> attribute), it is only accessible within the Makim config file.</li> <li><code>vars</code> is a convenient way to define reusable variables in the code. For example, if you frequently use a command in the <code>run</code> section, you can define a variable inside <code>vars</code> to make the Makim file more readable. Like <code>args</code>, this option is not available in the system context; it is only accessible within the Makim config file.</li> <li><code>env</code> is used to define environment variables. Any environment variable can be accessed via the <code>env</code> variable in the template (e.g., <code>{{ env.myenvvar }}</code>) or directly as an environment variable within the <code>run</code> section, as shown in the example below:</li> </ul> <pre><code>...\ngroups:\n  group1:\n    targets:\n      target1:\n        ...\n        env:\n          MYVAR: 1\n        run: |\n          echo $MYENV\n</code></pre>"},{"location":"template/#order-of-variable-rendering","title":"Order of Variable Rendering","text":"<p>One crucial point to keep in mind is the order of variable rendering within the Makim config file.</p> <p><code>vars</code> is primarily used for <code>run</code> section,  so they have the lowest precedence. In another word, you can use <code>env</code> or <code>arg</code> to create <code>vars</code>, but not the opposite way.</p> <p><code>env</code> however, can be defined also in the system scope, so it has the highest rank in the precedence. So, you shouldn't define a <code>env</code> that depends on a variable defined by <code>vars</code> or <code>args</code>. If you need to set your environment variable with a value from a <code>vars</code> or <code>args</code>, you should do it in the <code>run</code> section.</p> <p>In the following example, it shows a correct way to use all the different options of variables, respecting the scopes and rendering order:</p> <pre><code>...\nenv:\n  MY_GLOBAL_ENV: 1\nvars:\n  MY_GLOBAL_VAR: \"my global env is {{ env.MY_GLOBAL_ENV }}\"\n\ngroups:\n  group1:\n    help: \"group\"\n    env:\n      MY_GROUP_ENV: 2\n    vars:\n      MY_GROUP_VAR: \"my group env is {{ env.MY_GROUP_ENV }}\"\n    targets:\n      target1:\n        help: \"target 1\"\n        env:\n          MY_TARGET_ENV: 3\n        args:\n          my-target-arg:\n            help: \"target arg\"\n            type: string\n            default: \"{{ env.MY_TARGET_ENV }}\"\n        vars:\n          MY_TARGET_VAR: \"my group env is {{ env.MY_GROUP_ENV }}\"\n        run: |\n          echo \"{{ env.MY_GLOBAL_ENV}}\"\n          echo \"{{ env.MY_GLOBAL_VAR}}\"\n          echo \"{{ env.MY_GROUP_ENV}}\"\n          echo \"{{ env.MY_GROUP_VAR}}\"\n          echo \"{{ env.MY_TARGET_ENV}}\"\n          echo \"{{ env.MY_TARGET_VAR}}\"\n          echo \"{{ env.my_target_arg}}\"\n</code></pre>"},{"location":"xonsh/","title":"Xonsh Shell Integration","text":"<p>In the context of this project, Xonsh serves as the default shell for executing commands defined in the Makim configuration. By leveraging Xonsh, the Makim tool gains the flexibility and richness of the Python programming language within a command-line interface. This integration allows users to create sophisticated tasks and harness the full power of Python directly in the terminal.</p>"},{"location":"xonsh/#what-is-xonsh","title":"What is Xonsh?","text":"<p>Xonsh is a powerful shell language and command prompt designed to seamlessly blend traditional shell capabilities with the expressive syntax of Python. It offers an interactive and extensible environment that enables users to transition effortlessly between standard shell commands and Python scripting.</p>"},{"location":"xonsh/#key-features-and-commands-in-xonsh","title":"Key Features and Commands in Xonsh","text":"<ol> <li>Unified Syntax : Xonsh seamlessly integrates traditional shell syntax    with Python's clean and expressive syntax, creating a unified and consistent    scripting experience.</li> </ol> <pre><code># Shell-style command\nls -l\n# Python-style variable assignment\n$filename = \"example.txt\"\n# Combining both in a single command\necho \"The contents of $filename are: $(cat $filename)\"\n</code></pre> <ol> <li>Python Variables and Expressions : Python variables can be easily    incorporated into commands, enhancing the readability and flexibility of your    scripts.</li> </ol> <pre><code>$filename = \"example.txt\"\necho \"The filename is $filename\"\n</code></pre> <ol> <li>Looping and Conditional Statements : Use Python-style loops and    conditionals to create dynamic and complex command sequences.</li> </ol> <pre><code>for $i in range(3):\n    echo \"Iteration $i\"\n</code></pre> <ol> <li>Extensible Tab Completion : Xonsh offers extensible and intelligent tab    completion, making it easier to discover and complete commands and variables.</li> </ol> <pre><code>$long_variable_name = \"some_value\"\necho $long_&lt;TAB&gt;\n# Xonsh will intelligently complete the variable name\n</code></pre> <p>For more comprehensive information and documentation, explore the [Xonsh GitHub repository] (xonsh/xonsh) and the official Xonsh website.</p>"}]}