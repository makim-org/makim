{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p><code>Makim</code> (or <code>makim</code>) is based on <code>make</code> and focus on improve the way to define tasks and dependencies. Instead of using the <code>Makefile</code> format, it uses <code>yaml</code> format.</p> <p>The idea of this project is to offer a way to define tasks and dependencies with some control options, like conditionals <code>if</code>.</p> <p>It allows a very easy way to define texts for documentation and extra parameters for each task.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.github.io/makim</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Help text as first-class in the <code>.makim.yaml</code> specification. It can be used by   tasks and arguments.</li> <li>Tasks have an option for arguments.</li> <li>Tasks have an option for dependencies.</li> <li>Dependencies can call a task with specific arguments.</li> <li>Dependencies can have a conditional control flow (<code>if</code>).</li> <li>Allow the creation of groups, so the tasks can be organized by topics.</li> <li>Tasks and groups have an option for user defined variables and/or environment   variables.</li> <li>Access arguments, variables or environment variables via template (using   Jinja2).</li> <li>Option for using dot environment files using <code>env-file</code> key.</li> </ul>"},{"location":"#how-to-use-it","title":"How to use it","text":"<p>First you need to place the config file <code>.makim.yaml</code> in the root of your project. This is an example of a configuration file:</p> <pre><code>version: 1.0.0\ngroups:\n  default:\n    env-file: .env\n    tasks:\n      clean:\n        help: Use this task to clean up temporary files\n        args:\n          all:\n            type: bool\n            action: store_true\n            help: Remove all files that are tracked by git\n        run: |\n          echo \"remove file X\"\n      build:\n        help: Build the program\n        args:\n          clean:\n            type: bool\n            action: store_true\n            help: if not set, the clean dependency will not be triggered.\n        dependencies:\n          - task: clean\n            if: ${{ args.clean == true }}\n        run: |\n          echo \"build file x\"\n          echo \"build file y\"\n          echo \"build file z\"\n</code></pre> <p>Some examples of how to use it:</p> <ul> <li> <p>run the <code>build</code> task: <code>makim build</code></p> </li> <li> <p>run the <code>clean</code> task: <code>makim clean</code></p> </li> <li> <p>run the <code>build</code> task with the <code>clean</code> flag: <code>makim build --clean</code></p> </li> </ul> <p>The help menu for the <code>.makim.yaml</code> file would looks like this:</p> <pre><code>$ makim --help\nusage: MakIm [--help] [--version] [--config-file MAKIM_FILE] [task]\n\nMakIm is a tool that helps you to organize and simplify your helper commands.\n\npositional arguments:\n  task\n    Specify the task command to be performed. Options are:\n\n    default:\n    --------\n      default.clean =&gt; Use this task to clean up temporary files\n        ARGS:\n          --all: (bool) Remove all files that are tracked by git\n      default.build =&gt; Build the program\n        ARGS:\n          --clean: (bool) if not set, the clean dependency will not be triggered.\n\noptions:\n  --help, -h\n    Show the help menu\n  --version\n    Show the version of the installed MakIm tool.\n  --config-file MAKIM_FILE\n    Specify a custom location for the config file.\n\nIf you have any problem, open an issue at: https://github.com/osl-incubator/makim\n</code></pre> <p>As you can see, the help menu automatically adds information defined by all the <code>help</code> key, inside the <code>.makim.yaml</code> file.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#1151-2024-05-02","title":"1.15.1 (2024-05-02)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix issues with python version on CI (#107) (35fd405)</li> </ul>"},{"location":"changelog/#1150-2024-04-04","title":"1.15.0 (2024-04-04)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Improve the configuration for the shell app. (#100) (1647914)</li> </ul>"},{"location":"changelog/#1140-2024-03-18","title":"1.14.0 (2024-03-18)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Change the default template tag delimiter (#97) (7037195)</li> </ul>"},{"location":"changelog/#1130-2024-02-16","title":"1.13.0 (2024-02-16)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Allow vars with complex types (list, dict) (#95) (907680e)</li> </ul>"},{"location":"changelog/#1122-2024-02-12","title":"1.12.2 (2024-02-12)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix remove colorama (#94) (3f49a80)</li> </ul>"},{"location":"changelog/#1121-2024-02-09","title":"1.12.1 (2024-02-09)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Improve smoke test organization (#93) (5da1064)</li> </ul>"},{"location":"changelog/#1120-2024-01-30","title":"1.12.0 (2024-01-30)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>suggest probable command (#87) (cbc05aa)</li> </ul>"},{"location":"changelog/#1110-2024-01-18","title":"1.11.0 (2024-01-18)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add support for more shell apps (#84) (bd75fad)</li> </ul>"},{"location":"changelog/#1100-2024-01-12","title":"1.10.0 (2024-01-12)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix distlib installation failure (#72) (f7a9fb7)</li> </ul>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Replace argparse by typer (#82) (614ffd3)</li> </ul>"},{"location":"changelog/#191-2023-12-13","title":"1.9.1 (2023-12-13)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix documentation and add folder for artwork (#70) (2823053)</li> </ul>"},{"location":"changelog/#190-2023-12-08","title":"1.9.0 (2023-12-08)","text":""},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add dir to the task, group and global scope (#65) (3fbd61e)</li> </ul>"},{"location":"changelog/#183-2023-08-15","title":"1.8.3 (2023-08-15)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>deps: Fix the dependencies pinning (#54) (1038ec3)</li> </ul>"},{"location":"changelog/#182-2023-07-20","title":"1.8.2 (2023-07-20)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Trigger release for the latest refactoring commits (077479c)</li> </ul>"},{"location":"changelog/#181-2023-05-21","title":"1.8.1 (2023-05-21)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix the rendering flow of env, vars and args (#41) (3235d98)</li> </ul>"},{"location":"changelog/#180-2023-05-19","title":"1.8.0 (2023-05-19)","text":""},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>by default, for Xonsh shell, stop the task process if any command line fails (#19) (8fa4c1d)</li> </ul>"},{"location":"changelog/#171-2023-05-19","title":"1.7.1 (2023-05-19)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix release workflow and broken dependencies (#40) (c77c6f9), closes /github.com/ionrock/cachecontrol/issues/292#issuecomment-1536120527</li> </ul>"},{"location":"changelog/#170-2023-05-19","title":"1.7.0 (2023-05-19)","text":""},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Increase coverage of the env and env-file options for global, group and task scope (#39) (2481221)</li> </ul>"},{"location":"changelog/#167-2023-04-22","title":"1.6.7 (2023-04-22)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Break bash task when any line fails (#37) (9dab0f4)</li> </ul>"},{"location":"changelog/#166-2023-04-07","title":"1.6.6 (2023-04-07)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Fix both --version usage and the required property for arguments (#35) (3bc20e1)</li> </ul>"},{"location":"changelog/#165-2023-04-05","title":"1.6.5 (2023-04-05)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix nested commands (#34) (790d2ba)</li> </ul>"},{"location":"changelog/#164-2023-03-21","title":"1.6.4 (2023-03-21)","text":""},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>groups: change groups to accept dict instead of list &amp;&amp; improve help cmd (#28) (a6b1672)</li> </ul>"},{"location":"changelog/#163-2023-03-11","title":"1.6.3 (2023-03-11)","text":""},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Fix conditional parameter when --verbose is not given (#27) (e715268)</li> </ul>"},{"location":"changelog/#162-2023-03-08","title":"1.6.2 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix the mechanism for killing child processes when CTRL+C is pressed (#25) (00a9aff)</li> </ul>"},{"location":"changelog/#161-2023-03-08","title":"1.6.1 (2023-03-08)","text":""},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Fix IF statement and arguments used by dependencies (#24) (e03886e)</li> </ul>"},{"location":"changelog/#160-2023-02-26","title":"1.6.0 (2023-02-26)","text":""},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add support for user defined shell app (#22) (dd4a7db)</li> </ul>"},{"location":"changelog/#150-2023-02-08","title":"1.5.0 (2023-02-08)","text":""},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add required argument option (#16) (dc79486)</li> </ul>"},{"location":"changelog/#140-2023-02-07","title":"1.4.0 (2023-02-07)","text":""},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Add support to dot env file in the top level in the makim file (#15) (ee07cdb)</li> </ul>"},{"location":"changelog/#130-2023-02-05","title":"1.3.0 (2023-02-05)","text":""},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Add dependency argument (#13) (7f28c68)</li> </ul>"},{"location":"changelog/#120-2023-02-03","title":"1.2.0 (2023-02-03)","text":""},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Add initial support for arguments (#11) (4d105d0)</li> </ul>"},{"location":"changelog/#111-2023-02-03","title":"1.1.1 (2023-02-03)","text":""},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fix release workflow (#10) (39146bb)</li> </ul>"},{"location":"changelog/#110-2023-02-03","title":"1.1.0 (2023-02-03)","text":""},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Add support for variables for the task group (#9) (e3aa389)</li> </ul>"},{"location":"changelog/#102-2023-01-26","title":"1.0.2 (2023-01-26)","text":""},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Fix support for Python 3.7.1, 3.8, 3.9, 3.10 (#7) (418f3de)</li> </ul>"},{"location":"changelog/#101-2023-01-25","title":"1.0.1 (2023-01-25)","text":""},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Suppress the sh traceback message error (#5) (dc3f4ad)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Your contributions are valued and play a significant role in the continuous improvement of Makim. We welcome contributions of all forms and acknowledge all efforts.</p>"},{"location":"contributing/#how-you-can-contribute","title":"How You Can Contribute","text":"<p>Contributions can be made in various ways, outlined below:</p>"},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>If you encounter a bug in Makim, please report it via our GitHub issues page at: https://github.com/osl-incubator/makim/issues.</p> <p>When reporting a bug, kindly include the following information to aid in the issue's resolution:</p> <ul> <li>The name and version of your operating system.</li> <li>Any relevant details about your setup that might assist in diagnosing the   issue.</li> <li>A step-by-step guide to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>You can contribute by fixing bugs identified in the GitHub issues. Issues tagged with both \"bug\" and \"help wanted\" are available for anyone to work on.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Feature development is another way to contribute. Review the GitHub issues for requested features. Issues labeled with \"enhancement\" and \"help wanted\" are open for implementation.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>There's always a need for more documentation for Makim. This could be through enhancing the official documentation, contributing to docstrings, or sharing knowledge via blog posts, articles, and other media.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>Feedback is crucial for project improvement. To submit feedback or propose a feature:</p> <ul> <li>File an issue at   https://github.com/osl-incubator/makim/issues.</li> <li>For feature proposals, please provide a detailed explanation of how the   feature would function, aim for a narrow scope to facilitate easier   implementation, and remember, Makim is a volunteer-driven project, and we   welcome contributions.</li> </ul>"},{"location":"contributing/#requirements","title":"Requirements","text":"<p>Before you begin contributing to the Makim project, there are several technical prerequisites and best practices you should be familiar with. This section outlines the key requirements to ensure a smooth and productive contribution process.</p>"},{"location":"contributing/#conda-environment","title":"Conda Environment","text":"<p>Conda is a versatile tool that provides package, dependency, and environment management for various programming languages. In the Makim project, we leverage Conda to manage virtual environments and package dependencies effectively.</p> <ul> <li>Environment Setup: We strongly advise using a Conda environment while   working with Makim. If Conda is not installed on your system, you can download   it from Miniforge. For an   introductory overview of Conda, consider watching this   Conda Basics video.</li> <li>Best Practices: Avoid installing packages in the base Conda environment.   Always create and activate a new environment for each project to prevent   dependency conflicts and ensure a clean workspace.</li> </ul>"},{"location":"contributing/#git","title":"Git","text":"<p>Our collaborative efforts are facilitated through Git and GitHub. Understanding the fundamentals of Git is crucial for effective participation.</p> <ul> <li>Learning Resources: If you're new to Git, we recommend starting with the   Software Carpentry Git Lesson,   which covers essential Git concepts and workflows.</li> <li>Quick Reference: For a concise summary of common Git commands, refer to   this   Git Cheat Sheet   provided by GitHub.</li> <li>Configuration Tips:</li> <li>To streamline your workflow, configure Git to use <code>rebase</code> by default for     pulling changes with <code>git config --global pull.rebase true</code>.</li> <li>Familiarize yourself with the <code>git rebase</code> command for updating branches     from a remote repository. Although more complex, it is preferred over the     default merge commit strategy. For an in-depth explanation, visit     Atlassian's guide on merging vs. rebasing.</li> <li>Workflow: The standard open-source development workflow includes forking a   repository, cloning the fork locally, and configuring an <code>upstream</code> remote for   the original repository. Detailed instructions can be found in   GitHub's guide to configuring a remote for a fork.</li> </ul>"},{"location":"contributing/#python","title":"Python","text":"<p>Familiarity with Python and adherence to best practices is important for contributing to Makim.</p> <ul> <li>Style Guide: Follow the PEP 8 style guide for Python code, available at   PEP8.</li> <li>Best Practices: pyOpenSci offers a comprehensive guide for writing Python   packages, which can be found   here.</li> <li>Advanced Learning: To deepen your understanding of Python and general   programming concepts, consider enrolling in the   Design of Computer Programs   course on Udacity. Though challenging and based on Python 2, it provides   valuable insights into advanced Python usage and computer programming   principles.</li> </ul>"},{"location":"contributing/#how-to-get-support","title":"How to Get Support","text":"<p>Should you require assistance, please join our community on the Open Science Labs Discord server at https://opensciencelabs.org/discord. Here, you can participate in the incubator program and ask questions about Makim in its dedicated channel. You are also welcome to explore and join other groups that align with your interests.</p>"},{"location":"contributing/#setting-up-for-local-development","title":"Setting Up for Local Development","text":"<p>To contribute to <code>makim</code>, follow these steps to set up your development environment:</p> <ol> <li> <p>Fork the Repository: Begin by forking the <code>makim</code> repository on GitHub to    your own account.</p> </li> <li> <p>Clone Your Fork Locally: Clone the forked repository to your local    machine and navigate into the project directory.</p> </li> </ol> <pre><code>$ git clone git@github.com:your_username/makim.git\n$ cd makim\n</code></pre> <ol> <li>Install Dependencies: Use <code>mamba</code> to create a Conda environment and    <code>poetry</code> for managing Python dependencies.</li> </ol> <pre><code>$ mamba env create --file conda/dev.yaml --force\n$ conda activate makim\n$ poetry config virtualenvs.create false\n$ poetry install\n</code></pre> <ol> <li>Create a Development Branch: Make a dedicated branch for your bugfix or    feature.</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make Changes Locally: You are now ready to implement your changes or    improvements.</p> </li> <li> <p>Install and Use Pre-commit Hooks: <code>makim</code> utilizes <code>pre-commit</code> hooks to    ensure code quality. Install them locally and they will automatically run on    each commit.</p> </li> </ol> <pre><code>$ pre-commit install\n$ pre-commit run --all-files\n</code></pre> <p>To bypass the hooks temporarily, use <code>git commit</code> with <code>--no-verify</code>.</p> <ol> <li>Run Smoke Tests: Quickly validate the functionality of your changes with    smoke tests.</li> </ol> <pre><code>$ makim tests.smoke\n</code></pre> <p>Always complement smoke tests with thorough unit testing to ensure code    integrity.</p> <ol> <li>Unit Testing with <code>pytest</code>: <code>makim</code> leverages <code>pytest</code> for unit testing,    along with <code>pytest-cov</code> for coverage analysis. Run unit tests using:</li> </ol> <pre><code>$ python -m pytest\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest\n</code></pre> <ol> <li>Commit and Push Changes: Stage, commit, and push your changes to GitHub.    After setting the upstream branch once, subsequent pushes only require    <code>git push</code>.</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Detailed description of your changes.\"\n$ git push --set-upstream origin &lt;branch name&gt;\n</code></pre> <ol> <li>Submit a Pull Request: Once your changes are pushed, go to the GitHub     website to submit a pull request for review.</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>The Makim project utilizes <code>semantic-release</code> to automate the release process, basing new releases on the content of commit messages.</p>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<p><code>semantic-release</code> analyzes commit messages to assess the impact of changes made to the codebase. Adhering to a standardized commit message format allows <code>semantic-release</code> to automatically determine the next semantic version number, generate a comprehensive changelog, and publish the release.</p> <p>While <code>semantic-release</code> defaults to the Angular Commit Message Conventions, Makim adopts the \"Conventional Commits\" standard (https://www.conventionalcommits.org/en/v1.0.0/). This standard facilitates more detailed commit messages, especially for \"breaking changes\".</p> <p>Given the project's use of the <code>squash and merge</code> strategy for merging pull requests, it is crucial to format the PR title according to the commit message standards.</p> <p>To aid contributors in crafting compliant commit messages, tools like commitizen and commitlint are recommended. These tools help ensure that commit messages adhere to the required format.</p> <p>The following table illustrates how different commit messages correspond to the type of release generated by <code>semantic-release</code>, according to its default configuration:</p> Commit Message Example Release Type <code>fix(pencil): stop graphite breaking when too much pressure</code> Patch Release <code>feat(pencil): add 'graphiteWidth' option</code> Minor Release <code>perf(pencil): optimize 'graphiteWidth' calculation</code> Patch Release <code>fix(pencil)!: 'graphiteWidth' option removed</code> Major Release <p>Note: Within the Conventional Commits standard, appending <code>!</code> to the message prefix indicates a breaking change.</p> <p>For more details on the commit message format used by <code>semantic-release</code>, visit the semantic-release documentation.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#attribute-dir","title":"Attribute: dir","text":"<p>The dir feature in Makim allows users to define the directory from which commands associated with specific tasks or groups are executed. This provides greater flexibility and control over the execution environment.</p> <p>The <code>dir</code> attribute can be specified at three different scopes: global, group, and task. It allows users to set the working directory for a specific task, a group of tasks, or globally.</p>"},{"location":"features/#syntax-and-scopes","title":"Syntax and Scopes","text":"<p>The dir attribute can be applied to three different scopes:</p> <p>Setting the global working directory impacts all tasks and groups in the Makim   configuration.</p> <pre><code>version: 1.0\ndir: /path/to/global/directory\n# ... other configuration ...\n</code></pre> <p>Setting the working directory at the group scope affects all tasks within that   group.</p> <pre><code>version: 1.0\n\ngroups:\n  my-group:\n    dir: /path/to/group/directory\n    tasks:\n      task-1:\n        run: |\n        # This task will run with the working directory set to\n        # /path/to/group/directory\n</code></pre> <p>Setting the working directory at the task scope allows for fine grained   control over individual tasks.</p> <pre><code>version: 1.0\ngroups:\n  my-group:\n    tasks:\n      my-task:\n        dir: /path/to/task/directory\n        run: |\n        # This task will run with the working directory set to\n        # /path/to/task/directory\n</code></pre>"},{"location":"features/#global-scope","title":"Global Scope","text":""},{"location":"features/#group-scope","title":"Group Scope","text":""},{"location":"features/#task-scope","title":"Task Scope","text":""},{"location":"features/#example","title":"Example","text":"<pre><code>version: 1.0\ndir: /project-root\n\ngroups:\n  backend:\n    dir: backend\n    tasks:\n      build:\n        help: Build the backend services\n        dir: services\n        run: |\n          echo \"Building backend services...\"\n          # Additional build commands specific to the backend\n\n      test:\n        help: Run backend tests\n        dir: tests\n        run: |\n          echo \"Running backend tests...\"\n          # Additional test commands specific to the backend\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install makim, run this command in your terminal:</p> <pre><code>$ pip install makim\n</code></pre> <p>Makim is also available on conda-forge:</p> <pre><code>$ conda install -c conda-forge makim\n</code></pre> <p>This is the preferred method to install makim, as it will always install the most recent stable release.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for makim can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/makim.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/makim.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, change to the project root directory and install it with:</p> <pre><code>$ poetry install\n</code></pre> <p>PS: You need to have poetry installed. You can use it also from a conda environment. Check the <code>Contributing</code> page for more information.</p>"},{"location":"template/","title":"Makim Template","text":"<p>Makim config files are powered by the Jinja2 template engine, allowing you to use Jinja2 tags for added flexibility in your Makim config files.</p> <p>This page focuses on explaining the options offered directly by Makim, rather than covering all the possibilities with Jinja2.</p> <p>Makim provides three different variable options that can be combined: <code>vars</code>, <code>env</code>, and <code>args</code>.</p> <p>Additionally, the <code>env</code> and <code>vars</code> option has three different scopes: global, group, and task. We will discuss each of them in the following sections.</p>"},{"location":"template/#variables-scopes","title":"Variables Scopes","text":"<p>Before delving into the different variable options, let's discuss <code>env</code> and <code>vars</code> scope, as it is essential for the subsequent sections. The <code>args</code> attribute just works in the task scope.</p> <p>As mentioned earlier, Makim <code>env</code> and <code>vars</code> has three scopes: global, group, and task.</p> <p>The order of their rendering is crucial. First, the global scope is processed. In the group scope, any variable defined globally is accessible via the <code>env</code> variable (e.g., <code>${{ env.my_global_env }}</code>). However, any variable defined in the global scope will be overridden by a variable with the same name in the group scope. The same applies to the task scope, where any variable defined in the global or group scope will be overridden by a variable defined in the task scope.</p> <p>Moreover, <code>env</code> is a bit more complex, as its value can be defined in two different ways: either through the <code>env</code> attribute in the <code>.makim.yaml</code> file or from an environment file specified in the <code>env-file</code> attribute. First, the <code>env-file</code> is loaded into memory, and then the variables defined in the <code>env</code> attribute are loaded. In other words, any variable defined in the file for the given <code>env-file</code> will be overridden by a variable of the same name defined in the <code>env</code> attribute. This process also respects the order of scopes.</p> <p>PS: Makim utilizes system environment variables as the initial scope for the variables.</p>"},{"location":"template/#different-variable-options","title":"Different Variable Options","text":"<p>Makim offers three variable options within the <code>makim</code> config file: <code>env</code>, <code>vars</code>, and <code>args</code>.</p> <ul> <li><code>args</code> allows users to pass parameters via the CLI (command line interface).   It can also be used for task dependencies when parameters need to be passed to   the dependency. However, this option is not available in the system context   (the commands executed defined by <code>run</code> attribute), it is only accessible   within the Makim config file.</li> <li><code>vars</code> is a convenient way to define reusable variables in the code. For   example, if you frequently use a command in the <code>run</code> section, you can define   a variable inside <code>vars</code> to make the Makim file more readable. Like <code>args</code>,   this option is not available in the system context; it is only accessible   within the Makim config file.</li> <li><code>env</code> is used to define environment variables. Any environment variable can be   accessed via the <code>env</code> variable in the template (e.g.,   <code>${{ env.myenvvar }}</code>) or directly as an environment   variable within the <code>run</code> section, as shown in the example below:</li> </ul> <pre><code>...\ngroups:\n  group1:\n    tasks:\n      task1:\n        ...\n        env:\n          MYVAR: 1\n        run: |\n          echo $MYENV\n</code></pre>"},{"location":"template/#order-of-variable-rendering","title":"Order of Variable Rendering","text":"<p>One crucial point to keep in mind is the order of variable rendering within the Makim config file.</p> <p><code>vars</code> is primarily used for <code>run</code> section, so they have the lowest precedence. In another word, you can use <code>env</code> or <code>arg</code> to create <code>vars</code>, but not the opposite way.</p> <p><code>env</code> however, can be defined also in the system scope, so it has the highest rank in the precedence. So, you shouldn't define a <code>env</code> that depends on a variable defined by <code>vars</code> or <code>args</code>. If you need to set your environment variable with a value from a <code>vars</code> or <code>args</code>, you should do it in the <code>run</code> section.</p> <p>In the following example, it shows a correct way to use all the different options of variables, respecting the scopes and rendering order:</p> <pre><code>---\nenv:\n  MY_GLOBAL_ENV: 1\nvars:\n  MY_GLOBAL_VAR:\n    \"my global env is ${{ env.MY_GLOBAL_ENV }}\"\n\ngroups:\n  group1:\n    help: \"group\"\n    env:\n      MY_GROUP_ENV: 2\n    vars:\n      MY_GROUP_VAR:\n        \"my group env is ${{ env.MY_GROUP_ENV }}\"\n    tasks:\n      task1:\n        help: \"task 1\"\n        env:\n          MY_TARGET_ENV: 3\n        args:\n          my-task-arg:\n            help: \"task arg\"\n            type: string\n            default: \"${{ env.MY_TARGET_ENV }}\"\n        vars:\n          MY_TARGET_VAR:\n            \"my group env is ${{ env.MY_GROUP_ENV }}\"\n        run: |\n          echo \"${{ env.MY_GLOBAL_ENV}}\"\n          echo \"${{ env.MY_GLOBAL_VAR}}\"\n          echo \"${{ env.MY_GROUP_ENV}}\"\n          echo \"${{ env.MY_GROUP_VAR}}\"\n          echo \"${{ env.MY_TARGET_ENV}}\"\n          echo \"${{ env.MY_TARGET_VAR}}\"\n          echo \"${{ env.my_task_arg}}\"\n</code></pre>"},{"location":"xonsh/","title":"Xonsh Shell Integration","text":"<p>In the context of this project, Xonsh serves as the default shell for executing commands defined in the Makim configuration. By leveraging Xonsh, the Makim tool gains the flexibility and richness of the Python programming language within a command-line interface. This integration allows users to create sophisticated tasks and harness the full power of Python directly in the terminal.</p>"},{"location":"xonsh/#what-is-xonsh","title":"What is Xonsh?","text":"<p>Xonsh is a powerful shell language and command prompt designed to seamlessly blend traditional shell capabilities with the expressive syntax of Python. It offers an interactive and extensible environment that enables users to transition effortlessly between standard shell commands and Python scripting.</p>"},{"location":"xonsh/#key-features-and-commands-in-xonsh","title":"Key Features and Commands in Xonsh","text":"<ol> <li>Unified Syntax : Xonsh seamlessly integrates traditional shell syntax    with Python's clean and expressive syntax, creating a unified and consistent    scripting experience.</li> </ol> <pre><code># Shell-style command\nls -l\n# Python-style variable assignment\n$filename = \"example.txt\"\n# Combining both in a single command\necho \"The contents of $filename are: $(cat $filename)\"\n</code></pre> <ol> <li>Python Variables and Expressions : Python variables can be easily    incorporated into commands, enhancing the readability and flexibility of your    scripts.</li> </ol> <pre><code>$filename = \"example.txt\"\necho \"The filename is $filename\"\n</code></pre> <ol> <li>Looping and Conditional Statements : Use Python-style loops and    conditionals to create dynamic and complex command sequences.</li> </ol> <pre><code>for $i in range(3):\n    echo \"Iteration $i\"\n</code></pre> <ol> <li>Extensible Tab Completion : Xonsh offers extensible and intelligent tab    completion, making it easier to discover and complete commands and variables.</li> </ol> <pre><code>$long_variable_name = \"some_value\"\necho $long_&lt;TAB&gt;\n# Xonsh will intelligently complete the variable name\n</code></pre> <p>For more comprehensive information and documentation, explore the [Xonsh GitHub repository] (xonsh/xonsh) and the official Xonsh website.</p>"},{"location":"tutorials/introduction/","title":"Get Started","text":"<pre>pip install -q \"makim==1.15.0\"\n</pre> <ul> <li><p>For those who prefer <code>conda</code>, execute:</p> <pre>conda install \"makim==1.15.0\"\n</pre> </li> </ul> <p>Given Makim's active development, pinning to a specific version is recommended to ensure consistency.</p> <p>For this tutorial, we will disable the output color feature provided by typer, the command-line interface engine used by Makim.</p> In\u00a0[2]: Copied! <pre>import os\nos.environ[\"NO_COLOR\"] = \"1\"\n</pre> import os os.environ[\"NO_COLOR\"] = \"1\" In\u00a0[3]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0.0\ngroups:\n  clean:\n    env-file: .env\n    tasks:\n      tmp:\n        help: Use this task to clean up temporary files\n        run: |\n          echo \"Cleaning up...\"\n  tests:\n    tasks:\n     unit:\n       help: Build the program\n       args:\n         clean:\n           type: bool\n           action: store_true\n           help: if not set, the clean dependency will not be triggered.\n       dependencies:\n         - task: clean.tmp\n           if: ${{ args.clean == true }}\n       run: |\n         echo \"Runnint unit tests...\"\n</pre> %%writefile .makim.yaml version: 1.0.0 groups:   clean:     env-file: .env     tasks:       tmp:         help: Use this task to clean up temporary files         run: |           echo \"Cleaning up...\"   tests:     tasks:      unit:        help: Build the program        args:          clean:            type: bool            action: store_true            help: if not set, the clean dependency will not be triggered.        dependencies:          - task: clean.tmp            if: ${{ args.clean == true }}        run: |          echo \"Runnint unit tests...\" <pre>Overwriting .makim.yaml\n</pre> <p>This setup demonstrates Makim's ability to manage tasks with conditional logic and dependencies.</p> In\u00a0[4]: Copied! <pre>!makim --help\n</pre> !makim --help <pre>                                                                                \n Usage: makim [OPTIONS] COMMAND [ARGS]...                                       \n                                                                                \n Makim is a tool that helps you to organize and simplify your helper commands.  \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v            Show the version and exit                \u2502\n\u2502 --file                        TEXT  Makim config file [default: .makim.yaml] \u2502\n\u2502 --dry-run                           Execute the command in dry mode          \u2502\n\u2502 --verbose                           Execute the command in verbose mode      \u2502\n\u2502 --install-completion                Install completion for the current       \u2502\n\u2502                                     shell.                                   \u2502\n\u2502 --show-completion                   Show completion for the current shell,   \u2502\n\u2502                                     to copy it or customize the              \u2502\n\u2502                                     installation.                            \u2502\n\u2502 --help                              Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 clean.tmp        Use this task to clean up temporary files                 \u2502\n\u2502 tests.unit       Build the program                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n                                                                                \n If you have any problem, open an issue at:                                     \n https://github.com/osl-incubator/makim                                         \n                                                                                \n\n</pre> <p>This feature facilitates easy access to Makim's functionalities, enhancing usability and understanding of the tool.</p> In\u00a0[5]: Copied! <pre>!makim clean.tmp\n</pre> !makim clean.tmp <pre>Makim file: .makim.yaml\nCleaning up...\n</pre> In\u00a0[6]: Copied! <pre>!makim tests.unit\n</pre> !makim tests.unit <pre>Makim file: .makim.yaml\nRunnint unit tests...\n</pre> <p>In the case you type your command wrong, Makim will suggest you some alternative:</p> In\u00a0[7]: Copied! <pre>!makim tests.unittest\n</pre> !makim tests.unittest <pre>Usage: makim [OPTIONS] COMMAND [ARGS]...\nTry 'makim --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 No such command 'tests.unittest'.                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nCommand tests.unittest not found. Did you mean tests.unit'?\n</pre> <p>Makim CLI is empowered by Typer, and it allows us to have auto-completion for Makim groups and tasks! If you want to install, you can run the following command:</p> In\u00a0[8]: Copied! <pre>!makim --install-completion\n</pre> !makim --install-completion  <pre>bash completion installed in /home/xmn/.bash_completions/makim.sh\nCompletion will take effect once you restart the terminal\n</pre> <p>After this command you will need to restart the terminal in order to use this auto-completion feature.</p> In\u00a0[9]: Copied! <pre>%%writefile .env\nMSG_PREFIX=\"Running Makim: Hello, World,\"\n</pre> %%writefile .env MSG_PREFIX=\"Running Makim: Hello, World,\" <pre>Overwriting .env\n</pre> In\u00a0[10]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\nenv-file: .env\ngroups:\n  tests:\n    tasks:\n      node:\n        help: Test using nodejs\n        shell: node\n        run: console.log(\"${{ env.MSG_PREFIX }} from NodeJS!\");\n      perl:\n        help: Test using perl\n        shell: perl\n        run: print \"${{ env.MSG_PREFIX }} from Perl!\\n\";\n\n      python:\n        help: Test using php\n        shell: python\n        run: print(\"${{ env.MSG_PREFIX }} from Python!\")\n\n      r:\n        help: Test using R\n        shell: Rscript\n        run: print(\"${{ env.MSG_PREFIX }} from R!\")\n\n      sh:\n        help: Test using sh\n        shell: sh\n        run: echo \"${{ env.MSG_PREFIX }} from sh!\"\n\n      run-all:\n        help: Run tests for all the other tasks\n        dependencies:\n          - task: node\n          - task: perl\n          - task: python\n          - task: r\n          - task: sh\n</pre> %%writefile .makim.yaml version: 1.0 env-file: .env groups:   tests:     tasks:       node:         help: Test using nodejs         shell: node         run: console.log(\"${{ env.MSG_PREFIX }} from NodeJS!\");       perl:         help: Test using perl         shell: perl         run: print \"${{ env.MSG_PREFIX }} from Perl!\\n\";        python:         help: Test using php         shell: python         run: print(\"${{ env.MSG_PREFIX }} from Python!\")        r:         help: Test using R         shell: Rscript         run: print(\"${{ env.MSG_PREFIX }} from R!\")        sh:         help: Test using sh         shell: sh         run: echo \"${{ env.MSG_PREFIX }} from sh!\"        run-all:         help: Run tests for all the other tasks         dependencies:           - task: node           - task: perl           - task: python           - task: r           - task: sh <pre>Overwriting .makim.yaml\n</pre> In\u00a0[11]: Copied! <pre>!makim --help\n</pre> !makim --help <pre>                                                                                \n Usage: makim [OPTIONS] COMMAND [ARGS]...                                       \n                                                                                \n Makim is a tool that helps you to organize and simplify your helper commands.  \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v            Show the version and exit                \u2502\n\u2502 --file                        TEXT  Makim config file [default: .makim.yaml] \u2502\n\u2502 --dry-run                           Execute the command in dry mode          \u2502\n\u2502 --verbose                           Execute the command in verbose mode      \u2502\n\u2502 --install-completion                Install completion for the current       \u2502\n\u2502                                     shell.                                   \u2502\n\u2502 --show-completion                   Show completion for the current shell,   \u2502\n\u2502                                     to copy it or customize the              \u2502\n\u2502                                     installation.                            \u2502\n\u2502 --help                              Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 tests.node             Test using nodejs                                     \u2502\n\u2502 tests.perl             Test using perl                                       \u2502\n\u2502 tests.python           Test using php                                        \u2502\n\u2502 tests.r                Test using R                                          \u2502\n\u2502 tests.run-all          Run tests for all the other tasks                   \u2502\n\u2502 tests.sh               Test using sh                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n                                                                                \n If you have any problem, open an issue at:                                     \n https://github.com/osl-incubator/makim                                         \n                                                                                \n\n</pre> <p>Prior to executing these tasks, it is necessary to install the required dependencies:</p> In\u00a0[12]: Copied! <pre>!mamba install -q -y perl nodejs r-base sh\n</pre> !mamba install -q -y perl nodejs r-base sh  <p>Proceed to execute all defined tasks by invoking the run-all task, which encapsulates all other tasks as its dependencies for a sequential execution process:</p> In\u00a0[13]: Copied! <pre>!makim tests.run-all\n</pre> !makim tests.run-all <pre>Makim file: .makim.yaml\nRunning Makim: Hello, World, from NodeJS!\n(node:1634785) Warning: The 'NO_COLOR' env is ignored due to the 'FORCE_COLOR' env being set.\n(Use `node --trace-warnings ...` to show where the warning was created)\nRunning Makim: Hello, World, from Perl!\nRunning Makim: Hello, World, from Python!\n[1] \"Running Makim: Hello, World, from R!\"\nRunning Makim: Hello, World, from sh!\n</pre> <p>In scenarios where your chosen interpreter supports debugging - such as Python or Xonsh through the use of <code>breakpoint()</code> - you can introduce a breakpoint within your code. This enables the debugging of your Makim task, allowing for an interactive examination of the execution flow and variable states.</p> In\u00a0[14]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\n\nvars:\n  project-name: \"my-project\"\n  dependencies:\n    \"dep1\": \"v1\"\n    \"dep2\": \"v1.1\"\n    \"dep3\": \"v2.3\"\n  authorized-users:\n    - admin1\n    - admin2\n    - admin3\n\ngroups:\n  staging:\n    vars:\n      env-name: \"staging\"\n      staging-dependencies:\n        \"dep4\": \"v4.3\"\n        \"dep5\": \"v1.1.1\"\n      staging-authorized-users:\n        - staging1\n        - staging2\n        - staging3\n    tasks:\n      create-users:\n        help: Create users for staging, this example uses jinja2 for loop.\n        # each task can also specify their `vars`, but it will not be used in this example\n        run: |\n          def create_user(username):\n              print(f\"&gt;&gt;&gt; creating user: {username} ... DONE!\")\n                                                                \n          print(\"create admin users:\")\n          {% for user in vars.authorized_users %}\n          create_user(\"${{ user }}\")\n          {% endfor %}\n\n          print(\"\\ncreate staging users:\")\n          {% for user in vars.staging_authorized_users %}\n          create_user(\"${{ user }}\")\n          {% endfor %}\n\n      install:\n        help: install deps for staging using native xonsh `for` loop (it could work with Python as well)\n        # each task can also specify their `vars`, but it will not be used in this example\n        run: |\n          def install(package, version):\n              print(f\"&gt;&gt;&gt; installing: {package}@{version} ... DONE!\")\n                                            \n          print(\"install global dependencies:\")\n          for package, version in ${{ vars.dependencies | safe }}.items():\n              install(package, version)\n\n          print(\"\\ninstall staging dependencies:\")\n          for package, version in ${{ vars.staging_dependencies | safe }}.items():\n              install(package, version)\n</pre> %%writefile .makim.yaml version: 1.0  vars:   project-name: \"my-project\"   dependencies:     \"dep1\": \"v1\"     \"dep2\": \"v1.1\"     \"dep3\": \"v2.3\"   authorized-users:     - admin1     - admin2     - admin3  groups:   staging:     vars:       env-name: \"staging\"       staging-dependencies:         \"dep4\": \"v4.3\"         \"dep5\": \"v1.1.1\"       staging-authorized-users:         - staging1         - staging2         - staging3     tasks:       create-users:         help: Create users for staging, this example uses jinja2 for loop.         # each task can also specify their `vars`, but it will not be used in this example         run: |           def create_user(username):               print(f\"&gt;&gt;&gt; creating user: {username} ... DONE!\")                                                                            print(\"create admin users:\")           {% for user in vars.authorized_users %}           create_user(\"${{ user }}\")           {% endfor %}            print(\"\\ncreate staging users:\")           {% for user in vars.staging_authorized_users %}           create_user(\"${{ user }}\")           {% endfor %}        install:         help: install deps for staging using native xonsh `for` loop (it could work with Python as well)         # each task can also specify their `vars`, but it will not be used in this example         run: |           def install(package, version):               print(f\"&gt;&gt;&gt; installing: {package}@{version} ... DONE!\")                                                        print(\"install global dependencies:\")           for package, version in ${{ vars.dependencies | safe }}.items():               install(package, version)            print(\"\\ninstall staging dependencies:\")           for package, version in ${{ vars.staging_dependencies | safe }}.items():               install(package, version) <pre>Overwriting .makim.yaml\n</pre> <p>Now, let's proceed to create users within the staging environment:</p> In\u00a0[15]: Copied! <pre>!makim staging.create-users\n</pre> !makim staging.create-users <pre>Makim file: .makim.yaml\ncreate admin users:\n&gt;&gt;&gt; creating user: admin1 ... DONE!\n&gt;&gt;&gt; creating user: admin2 ... DONE!\n&gt;&gt;&gt; creating user: admin3 ... DONE!\n\ncreate staging users:\n&gt;&gt;&gt; creating user: staging1 ... DONE!\n&gt;&gt;&gt; creating user: staging2 ... DONE!\n&gt;&gt;&gt; creating user: staging3 ... DONE!\n</pre> <p>Last but not least, let's run the install task:</p> In\u00a0[16]: Copied! <pre>!makim staging.install\n</pre> !makim staging.install <pre>Makim file: .makim.yaml\ninstall global dependencies:\n&gt;&gt;&gt; installing: dep1@v1 ... DONE!\n&gt;&gt;&gt; installing: dep2@v1.1 ... DONE!\n&gt;&gt;&gt; installing: dep3@v2.3 ... DONE!\n\ninstall staging dependencies:\n&gt;&gt;&gt; installing: dep4@v4.3 ... DONE!\n&gt;&gt;&gt; installing: dep5@v1.1.1 ... DONE!\n</pre> In\u00a0[17]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0.0\ngroups:\n  print:\n    env-file: .env\n    tasks:\n      name:\n        help: Print given name\n        args:\n          name:\n            type: str\n            required: true\n        run: print(\"${{ args.name }}\")\n      list:\n        help: Build the program\n        args:\n          i-am-sure:\n            type: bool\n        dependencies:\n          - task: print.name\n            if: ${{ args.i_am_sure == true }}\n            args:\n              name: Mary\n          - task: print.name\n            if: ${{ args.i_am_sure == true }}\n            args:\n              name: John\n          - task: print.name\n            if: ${{ args.i_am_sure == true }}\n            args:\n              name: Ellen\n          - task: print.name\n            if: ${{ args.i_am_sure == true }}\n            args:\n              name: Marc\n</pre> %%writefile .makim.yaml version: 1.0.0 groups:   print:     env-file: .env     tasks:       name:         help: Print given name         args:           name:             type: str             required: true         run: print(\"${{ args.name }}\")       list:         help: Build the program         args:           i-am-sure:             type: bool         dependencies:           - task: print.name             if: ${{ args.i_am_sure == true }}             args:               name: Mary           - task: print.name             if: ${{ args.i_am_sure == true }}             args:               name: John           - task: print.name             if: ${{ args.i_am_sure == true }}             args:               name: Ellen           - task: print.name             if: ${{ args.i_am_sure == true }}             args:               name: Marc <pre>Overwriting .makim.yaml\n</pre> In\u00a0[18]: Copied! <pre>!makim print.list\n</pre> !makim print.list <pre>Makim file: .makim.yaml\n</pre> In\u00a0[19]: Copied! <pre>!makim print.list --i-am-sure\n</pre> !makim print.list --i-am-sure <pre>Makim file: .makim.yaml\nMary\nJohn\nEllen\nMarc\n</pre> In\u00a0[20]: Copied! <pre>%%writefile .env\nENV=dev\n</pre> %%writefile .env ENV=dev <pre>Overwriting .env\n</pre> In\u00a0[21]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\nenv-file: .env\nenv:\n  GLOBAL_VAR: \"1\"\ngroups:\n  global-scope:\n    env:\n      GROUP_VAR: \"2\"\n    tasks:\n      test-var-env-file:\n        help: Test env variable defined in the global scope from env-file\n        run: |\n          import os\n          assert str(os.getenv(\"ENV\")) == \"dev\"\n\n      test-var-env:\n        help: Test env variable defined in the global scope in `env` section\n        env:\n          TARGET_VAR: \"3\"\n        run: |\n          import os\n          # you can get an environment variable directly with xonsh/python\n          assert str(os.getenv(\"GLOBAL_VAR\")) == \"1\"\n          # or you can get an environment variable using jinja2 tag\n          assert \"${{ env.GROUP_VAR }}\" == \"2\"\n          assert \"${{ env.get(\"TARGET_VAR\") }}\" == \"3\"\n          assert \"${{ env.get(\"UNKNOWN_TARGET_VAR\", \"4\") }}\" == \"4\"\n</pre> %%writefile .makim.yaml version: 1.0 env-file: .env env:   GLOBAL_VAR: \"1\" groups:   global-scope:     env:       GROUP_VAR: \"2\"     tasks:       test-var-env-file:         help: Test env variable defined in the global scope from env-file         run: |           import os           assert str(os.getenv(\"ENV\")) == \"dev\"        test-var-env:         help: Test env variable defined in the global scope in `env` section         env:           TARGET_VAR: \"3\"         run: |           import os           # you can get an environment variable directly with xonsh/python           assert str(os.getenv(\"GLOBAL_VAR\")) == \"1\"           # or you can get an environment variable using jinja2 tag           assert \"${{ env.GROUP_VAR }}\" == \"2\"           assert \"${{ env.get(\"TARGET_VAR\") }}\" == \"3\"           assert \"${{ env.get(\"UNKNOWN_TARGET_VAR\", \"4\") }}\" == \"4\" <pre>Overwriting .makim.yaml\n</pre> In\u00a0[22]: Copied! <pre>!makim global-scope.test-var-env-file\n</pre> !makim global-scope.test-var-env-file <pre>Makim file: .makim.yaml\n</pre> In\u00a0[23]: Copied! <pre>!makim global-scope.test-var-env\n</pre> !makim global-scope.test-var-env <pre>Makim file: .makim.yaml\n</pre> In\u00a0[24]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\ndir: \"/tmp\"\n\ngroups:\n  check-wd:\n    tasks:\n      is-tmp:\n        help: Test if working directory is `tmp`\n        run: |\n          import os\n          print(os.getcwd())\n          assert os.getcwd() == \"/tmp\"\n</pre> %%writefile .makim.yaml version: 1.0 dir: \"/tmp\"  groups:   check-wd:     tasks:       is-tmp:         help: Test if working directory is `tmp`         run: |           import os           print(os.getcwd())           assert os.getcwd() == \"/tmp\" <pre>Overwriting .makim.yaml\n</pre> In\u00a0[25]: Copied! <pre>!makim check-wd.is-tmp\n</pre> !makim check-wd.is-tmp <pre>Makim file: .makim.yaml\n/tmp\n</pre> <p>This tutorial concludes with a showcase of Makim's key features. While this overview covers the essentials, diving deeper into Makim will reveal more advanced and intriguing ways to leverage its capabilities.</p>"},{"location":"tutorials/introduction/#get-started","title":"Get Started\u00b6","text":"<p>In software development, where efficiency, consistency, and reliability are paramount, automation tools play a crucial role. Makim, an innovative open-source tool, steps into the spotlight to improve automation workflows. It simplifies script execution, environment management, and task dependencies, positioning itself as a great asset in modern development environments.</p>"},{"location":"tutorials/introduction/#introducing-makim","title":"Introducing Makim\u00b6","text":"<p><code>Makim</code> elevates project automation by offering a structured, yet flexible approach to manage routine tasks, complex task dependencies, and environment configurations. Its design is centered around the <code>.makim.yaml</code> configuration file, allowing developers to orchestrate their workflows with precision and ease. Unlike traditional script execution tools, Makim's Python-based architecture and support for multiple programming languages and shells enhance its versatility and applicability across diverse projects.</p> <p>Especially suited for DevOps Engineers and Software Developers, Makim eliminates redundancy in automation tasks. Its core functionality extends beyond simple script execution, encompassing:</p> <ul> <li>Argument definition for scripts</li> <li>Organization of tasks into groups</li> <li>Advanced dependency management between tasks</li> <li>Utilization of environment variables and custom variables</li> <li>Dynamic content generation with Jinja2 templates</li> <li>Specification of working directories for tasks</li> <li>Execution flexibility through support for multiple interpreters or shells</li> </ul> <p>Despite its broad capabilities, Makim currently lacks support for Windows but plans to extend its compatibility in future versions.</p>"},{"location":"tutorials/introduction/#getting-started-with-makim","title":"Getting Started with Makim\u00b6","text":""},{"location":"tutorials/introduction/#installation","title":"Installation\u00b6","text":"<p>Makim can be installed via <code>pip</code> or <code>conda</code>, catering to different setup preferences:</p> <ul> <li>To install <code>Makim</code> using <code>pip</code>, run:</li> </ul>"},{"location":"tutorials/introduction/#configuring-makimyaml","title":"Configuring <code>.makim.yaml</code>\u00b6","text":"<p>The <code>.makim.yaml</code> file is the foundation of your Makim configuration. Here's how to start:</p> <ol> <li><p>Create the <code>.makim.yaml</code> File: Place this file at the root of your project directory.</p> </li> <li><p>Define Your Automation Tasks: Configure your tasks, specifying actions, arguments, and dependencies. For example:</p> </li> </ol>"},{"location":"tutorials/introduction/#exploring-makims-cli","title":"Exploring Makim's CLI\u00b6","text":"<p>Makim's CLI provides insights into available commands, arguments, and configurations through the auto-generated help menu:</p>"},{"location":"tutorials/introduction/#executing-your-first-commands","title":"Executing Your First Commands\u00b6","text":"<p>With your <code>.makim.yaml</code> file set up, you can begin to use <code>makim</code>:</p>"},{"location":"tutorials/introduction/#advanced-features-and-examples","title":"Advanced Features and Examples\u00b6","text":"<p>Makim's adaptability is showcased through various features and practical examples:</p> <ul> <li>Conditional Dependencies and Arguments: Define complex task dependencies with conditional execution based on passed arguments.</li> <li>Dynamic Configuration with Jinja2: Leverage Jinja2 templates for advanced scripting and dynamic content generation.</li> <li>Environment and Custom Variable Management: Organize and utilize variables effectively across different scopes of your project.</li> <li>Specifying Working Directories: Control the execution context of your tasks by setting working directories.</li> </ul> <p>These examples underscore Makim's capability to accommodate intricate automation scenarios, streamlining development workflows.</p>"},{"location":"tutorials/introduction/#exploring-makim-through-examples","title":"Exploring Makim Through Examples\u00b6","text":""},{"location":"tutorials/introduction/#utilizing-various-interpreters","title":"Utilizing Various Interpreters\u00b6","text":"<p>Makim extends its functionality beyond conventional script execution by supporting various interpreters and shell languages, facilitating a versatile development environment. While xonsh is the default interpreter - blending the capabilities of Bash and Python for an enriched command-line experience - Makim's architecture allows for seamless integration with other environments. For developers seeking to leverage this feature, a foundational understanding of xonsh can be beneficial. Comprehensive details and usage guidelines are available in the official xonsh documentation.</p> <p>This section demonstrates executing straightforward commands across multiple interpreters, showcasing Makim's adaptability to diverse programming contexts.</p>"},{"location":"tutorials/introduction/#using-variables-vars","title":"Using Variables (vars)\u00b6","text":"<p>Makim facilitates the definition of variables within the <code>.makim.yaml</code> configuration, supporting all the YAML data types, including strings, lists, and dictionaries. This feature enhances script configurability and reusability across different tasks and environments.</p> <p>Consider reviewing the provided example to understand how to effectively leverage variables in your Makim configurations:</p>"},{"location":"tutorials/introduction/#defining-arguments","title":"Defining Arguments\u00b6","text":"<p>Makim enhances script flexibility by allowing the use of arguments. It enables not only the definition of arguments for tasks but also the passing of arguments to dependencies and the specification of conditions for those dependencies.</p> <p>Explore this functionality through this example:</p>"},{"location":"tutorials/introduction/#utilizing-environment-variables","title":"Utilizing Environment Variables\u00b6","text":"<p>The previous sections demonstrated the use of environment variables. Here, we'll delve into their application in more detail.</p> <p>Makim permits the incorporation of environment variables from <code>.env</code> files or directly within the <code>.makim.yaml</code> file, applicable at global, group, and task levels.</p> <p>Examine an example to understand the implementation:</p>"},{"location":"tutorials/introduction/#specifying-the-working-directory","title":"Specifying the Working Directory\u00b6","text":"<p>Makim provides the capability to set a specific working directory for tasks at any scope: global, group, or task.</p> <p>Review a straightforward example to learn how to apply this feature:</p>"},{"location":"tutorials/introduction/#contributing-to-makim","title":"Contributing to Makim\u00b6","text":"<p>Makim's growth is propelled by its community. Contributions, whether through code, documentation, or feedback, are welcome. Explore the GitHub repository and consider contributing to foster Makim's development.</p>"},{"location":"tutorials/introduction/#conclusion","title":"Conclusion\u00b6","text":"<p>Makim stands out as a transformative tool in project automation, bridging the gap between simplicity and complexity. Its comprehensive feature set, coupled with the flexibility of its configuration, makes Makim a quintessential tool for developers and DevOps engineers alike. As you incorporate Makim into your projects, its impact on enhancing productivity and consistency will become evident, marking it as an indispensable part of your development toolkit.</p> <p>Dive deeper into Makim's functionalities by visiting the official documentation. Try it and let us know your thoughts about it!</p>"},{"location":"tutorials/makim-for-nox-users/","title":"Makim for Nox Users","text":"<p>For those familiar with Nox, a command-line automation tool designed for testing across multiple Python environments, Makim presents a flexible alternative. While both tools serve automation purposes, they differ in configuration approach and scope.</p> <p>Makim is not designed to supersede Nox or facilitate direct integration with it. The purpose of this guide is to highlight both the similarities and differences between the two tools, and to explore possible ways to integrate Nox tasks (sessions) within the Makim.</p> <p>To begin, ensure Nox is installed in your environment:</p> In\u00a0[1]: Copied! <pre>!pip install -q nox\n</pre> !pip install -q nox <p>Though Makim is not a direct replacement for Nox, understanding their similarities and differences can streamline the transition process for specific tasks or workflows. Consider the following Nox configuration:</p> In\u00a0[2]: Copied! <pre>%%writefile noxfile.py\nimport nox\n\n@nox.session(name=\"custom-name\")\ndef tests(session: nox.Session) -&gt; None:\n    \"\"\"Run tests with pytest.\"\"\"\n    session.install(\"pytest\")\n    session.run(\"pytest\", \"--version\")\n\n@nox.session\ndef lint(session: nox.Session):\n    \"\"\"Run linters on the codebase.\"\"\"\n    session.install('flake8')\n    # Example of using session.posargs for ad-hoc arguments\n    additional_args = session.posargs or []\n    session.run('flake8', '--version', *additional_args)\n</pre> %%writefile noxfile.py import nox  @nox.session(name=\"custom-name\") def tests(session: nox.Session) -&gt; None:     \"\"\"Run tests with pytest.\"\"\"     session.install(\"pytest\")     session.run(\"pytest\", \"--version\")  @nox.session def lint(session: nox.Session):     \"\"\"Run linters on the codebase.\"\"\"     session.install('flake8')     # Example of using session.posargs for ad-hoc arguments     additional_args = session.posargs or []     session.run('flake8', '--version', *additional_args) <pre>Overwriting noxfile.py\n</pre> <p>In this example, we are using <code>--version</code> with <code>pytest</code> and <code>flake8</code> just to check if everything is working properly. In a real code, it should execute directly <code>pytest</code> and <code>flake8</code>.</p> <p>Let's check how the nox list output (similar to a help output) would look like:</p> In\u00a0[3]: Copied! <pre>!nox --list\n</pre> !nox --list <pre>Sessions defined in /mnt/sda1/storage/dev/opensciencelabs-projects/osl-incubator/makim/docs/tutorials/noxfile.py:\n\n* custom-name -&gt; Run tests with pytest.\n* lint -&gt; Run linters on the codebase.\n\nsessions marked with * are selected, sessions marked with - are skipped.\n</pre> <p>NOTE: It appears that Nox does not offer a built-in, first-class method for displaying the arguments used by each Nox session.</p> <p>We can also verify that the command functions as expected:</p> In\u00a0[4]: Copied! <pre>!nox\n</pre> !nox <pre>nox &gt; Running session custom-name\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/custom-name\nnox &gt; python -m pip install pytest\nnox &gt; pytest --version\npytest 8.1.1\nnox &gt; Session custom-name was successful.\nnox &gt; Running session lint\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/lint\nnox &gt; python -m pip install flake8\nnox &gt; flake8 --version\n7.0.0 (mccabe: 0.7.0, pycodestyle: 2.11.1, pyflakes: 3.2.0) CPython 3.8.1 on\nLinux\nnox &gt; Session lint was successful.\nnox &gt; Ran multiple sessions:\nnox &gt; * custom-name: success\nnox &gt; * lint: success\n</pre> <p>It is working as expected!</p> <p>To replicate this functionality in Makim, you would use a <code>.makim.yaml</code> configuration file:</p> In\u00a0[5]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\ngroups:\n  nox:\n    help: A set of functionality ported from noxfile.py\n    tasks:\n      tests:\n        help: Run tests with pytest\n        run: |\n          pytest --version\n      lint:\n        help: Run lint with flake8\n        args:\n          extras:\n            help: Extra arguments for flake8\n            type: string\n            default: \"--version\"\n        run: |\n          flake8 ${{ args.extras }}\n</pre> %%writefile .makim.yaml version: 1.0 groups:   nox:     help: A set of functionality ported from noxfile.py     tasks:       tests:         help: Run tests with pytest         run: |           pytest --version       lint:         help: Run lint with flake8         args:           extras:             help: Extra arguments for flake8             type: string             default: \"--version\"         run: |           flake8 ${{ args.extras }} <pre>Overwriting .makim.yaml\n</pre> <p>This example illustrates how to define similar testing and linting tasks within Makim's YAML-based configuration.</p> <p>The default configuration file used by makim is <code>.makim.yaml</code>, but if you want a different file name, you can run <code>makim</code> with the flag <code>--file</code>.</p> <p>As you can see, it didn't install anything, because it assumes you already have all the dependencies there.</p> <p>Of course, you can install whatever you want inside the Makim <code>run</code> block, but it is much better to keep it in your pyproject.toml configuration.</p> <p>In the future, makim will allow users to define specific virtual environments that could be used in a similar way as nox.</p> <p>NOTE: This tutorial used makim version 1.15.0. The version <code>1.*</code> is still a beta version, so you maybe will find differences with future versions.</p> <p>Before running the <code>makim</code> command, please install it in your virtual environment: <code>pip install \"makim==1.15.0\"</code>.</p> <p>First, let's check how the makim <code>help</code> menu looks like:</p> In\u00a0[6]: Copied! <pre>!makim --help\n</pre> !makim --help <pre>                                                                                \n Usage: makim [OPTIONS] COMMAND [ARGS]...                                       \n                                                                                \n Makim is a tool that helps you to organize and simplify your helper commands.  \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version             -v            Show the version and exit                \u2502\n\u2502 --file                        TEXT  Makim config file [default: .makim.yaml] \u2502\n\u2502 --dry-run                           Execute the command in dry mode          \u2502\n\u2502 --verbose                           Execute the command in verbose mode      \u2502\n\u2502 --install-completion                Install completion for the current       \u2502\n\u2502                                     shell.                                   \u2502\n\u2502 --show-completion                   Show completion for the current shell,   \u2502\n\u2502                                     to copy it or customize the              \u2502\n\u2502                                     installation.                            \u2502\n\u2502 --help                              Show this message and exit.              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 nox.lint                 Run lint with flake8                                \u2502\n\u2502 nox.tests                Run tests with pytest                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n                                                                                \n If you have any problem, open an issue at:                                     \n https://github.com/osl-incubator/makim                                         \n                                                                                \n\n</pre> <p>And if you want to check more details about a specific command:</p> In\u00a0[7]: Copied! <pre>!makim nox.lint --help\n</pre> !makim nox.lint --help <pre>Makim file: .makim.yaml\n                                                                                \n Usage: makim nox.lint [OPTIONS]                                                \n                                                                                \n Run lint with flake8                                                           \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --extras        TEXT  Extra arguments for flake8 [default: --version]        \u2502\n\u2502 --help                Show this message and exit.                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n</pre> <p>As you can see, it shows information about all the possible arguments for each command.</p> <p>Makim enhances the automation process by focusing on direct command execution within predefined environments. Unlike Nox, which creates and manages virtual environments, Makim assumes dependencies are already installed, streamlining its operations.</p> <p>Future versions of Makim plan to introduce more advanced virtual environment management, potentially aligning closer with Nox's functionality.</p> <p>For more information about Makim, please read the Introduction tutorial.</p> <p>While using Nox directly within a <code>.makim.yaml</code> file might seem redundant, it demonstrates Makim's flexibility in accommodating various tools and workflows:</p> In\u00a0[8]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\ngroups:\n  nox:\n    help: A set of functionality ported from noxfile.py\n    tasks:\n      run:\n        help: Run nox\n        args:\n          \"ex\":\n            help: Extra arguments for nox\n            type: string\n            default: \"\"\n        run: |\n          nox ${{ args.ex }}\n</pre> %%writefile .makim.yaml version: 1.0 groups:   nox:     help: A set of functionality ported from noxfile.py     tasks:       run:         help: Run nox         args:           \"ex\":             help: Extra arguments for nox             type: string             default: \"\"         run: |           nox ${{ args.ex }} <pre>Overwriting .makim.yaml\n</pre> <p>This configuration allows for the execution of Nox sessions through Makim, providing an extra layer of automation convenience.</p> In\u00a0[9]: Copied! <pre>!makim nox.run\n</pre> !makim nox.run <pre>Makim file: .makim.yaml\nnox &gt; Running session custom-name\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/custom-name\nnox &gt; python -m pip install pytest\nnox &gt; pytest --version\npytest 8.1.1\nnox &gt; Session custom-name was successful.\nnox &gt; Running session lint\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/lint\nnox &gt; python -m pip install flake8\nnox &gt; flake8 --version\n7.0.0 (mccabe: 0.7.0, pycodestyle: 2.11.1, pyflakes: 3.2.0) CPython 3.8.1 on\nLinux\nnox &gt; Session lint was successful.\nnox &gt; Ran multiple sessions:\nnox &gt; * custom-name: success\nnox &gt; * lint: success\n</pre> <p>You can also run a specific nox session:</p> In\u00a0[10]: Copied! <pre>!makim nox.run --ex \"-s lint\"\n</pre> !makim nox.run --ex \"-s lint\" <pre>Makim file: .makim.yaml\nnox &gt; Running session lint\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/lint\nnox &gt; python -m pip install flake8\nnox &gt; flake8 --version\n7.0.0 (mccabe: 0.7.0, pycodestyle: 2.11.1, pyflakes: 3.2.0) CPython 3.8.1 on\nLinux\nnox &gt; Session lint was successful.\n</pre> <p>In scenarios where integrating Nox sessions directly within Makim is preferred, Makim's <code>shell</code> command can invoke Nox as the interpreter:</p> In\u00a0[11]: Copied! <pre>%%writefile .makim.yaml\nversion: 1.0\ngroups:\n  nox:\n    help: A set of functionality ported from noxfile.py\n    tasks:\n      tests:\n        help: Run nox tests\n        shell: nox\n        run: |\n          import nox\n\n          @nox.session(name=\"custom-name\")\n          def tests(session: nox.Session) -&gt; None:\n              \"\"\"Run tests with pytest.\"\"\"\n              session.install(\"pytest\")\n              session.run(\"pytest\", \"--version\")\n      lint:\n        help: Run nox tests\n        shell: nox\n        run: |\n          import nox\n\n          @nox.session\n          def lint(session: nox.Session):\n              \"\"\"Run linters on the codebase.\"\"\"\n              session.install('flake8')\n              session.run('flake8', '--version')\n\n      all:\n        help: Run nox tests\n        dependencies:\n          - task: nox.tests\n          - task: nox.lint\n</pre> %%writefile .makim.yaml version: 1.0 groups:   nox:     help: A set of functionality ported from noxfile.py     tasks:       tests:         help: Run nox tests         shell: nox         run: |           import nox            @nox.session(name=\"custom-name\")           def tests(session: nox.Session) -&gt; None:               \"\"\"Run tests with pytest.\"\"\"               session.install(\"pytest\")               session.run(\"pytest\", \"--version\")       lint:         help: Run nox tests         shell: nox         run: |           import nox            @nox.session           def lint(session: nox.Session):               \"\"\"Run linters on the codebase.\"\"\"               session.install('flake8')               session.run('flake8', '--version')        all:         help: Run nox tests         dependencies:           - task: nox.tests           - task: nox.lint <pre>Overwriting .makim.yaml\n</pre> <p>In this example, we created a task (task) for each Nox session. To execute the <code>tests</code> task, just run:</p> In\u00a0[12]: Copied! <pre>!makim nox.tests\n</pre> !makim nox.tests <pre>Makim file: .makim.yaml\nnox &gt; Running session custom-name\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/custom-name\nnox &gt; python -m pip install pytest\nnox &gt; pytest --version\npytest 8.1.1\nnox &gt; Session custom-name was successful.\n</pre> <p>To execute the <code>lint</code> task, run:</p> In\u00a0[13]: Copied! <pre>!makim nox.lint\n</pre> !makim nox.lint <pre>Makim file: .makim.yaml\nnox &gt; Running session lint\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/lint\nnox &gt; python -m pip install flake8\nnox &gt; flake8 --version\n7.0.0 (mccabe: 0.7.0, pycodestyle: 2.11.1, pyflakes: 3.2.0) CPython 3.8.1 on\nLinux\nnox &gt; Session lint was successful.\n</pre> <p>As we also created a task that has both <code>tests</code> and <code>lint</code> tasks as dependencies, so we can run both just running the <code>all</code> task:</p> In\u00a0[14]: Copied! <pre>!makim nox.all\n</pre> !makim nox.all <pre>Makim file: .makim.yaml\nnox &gt; Running session custom-name\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/custom-name\nnox &gt; python -m pip install pytest\nnox &gt; pytest --version\npytest 8.1.1\nnox &gt; Session custom-name was successful.\nnox &gt; Running session lint\nnox &gt; Creating virtual environment (virtualenv) using python3.8 in .nox/lint\nnox &gt; python -m pip install flake8\nnox &gt; flake8 --version\n7.0.0 (mccabe: 0.7.0, pycodestyle: 2.11.1, pyflakes: 3.2.0) CPython 3.8.1 on\nLinux\nnox &gt; Session lint was successful.\n</pre> <p>Integrating Nox within a Makim configuration might not always offer tangible benefits, and potentially introducing unnecessary complexity.</p> <p>Although Nox offers robust automation capabilities, especially for testing across multiple Python environments, for projects where CI workflows are already optimized for environment-specific jobs, transitioning to Makim could simplify and streamline development processes.</p>"},{"location":"tutorials/makim-for-nox-users/#makim-for-nox-users","title":"Makim for Nox Users\u00b6","text":""},{"location":"tutorials/makim-for-nox-users/#initial-setup","title":"Initial Setup\u00b6","text":""},{"location":"tutorials/makim-for-nox-users/#transitioning-from-nox-to-makim","title":"Transitioning from Nox to Makim\u00b6","text":""},{"location":"tutorials/makim-for-nox-users/#understanding-makims-approach","title":"Understanding Makim's Approach\u00b6","text":""},{"location":"tutorials/makim-for-nox-users/#integrating-nox-within-makim","title":"Integrating Nox within Makim\u00b6","text":""},{"location":"tutorials/makim-for-nox-users/#direct-noxfile-integration","title":"Direct Noxfile Integration\u00b6","text":""},{"location":"tutorials/makim-for-nox-users/#concluding-thoughts","title":"Concluding Thoughts\u00b6","text":""}]}