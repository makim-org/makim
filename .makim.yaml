version: 1.0
groups:
  clean:
    targets:
      tmp:
        help: Clean unnecessary temporary files
        shell: bash
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name '__pycache__' -exec rm -fr {} +
          find . -name '*.pyo' -exec rm -f {} +
          find . -name '*~' -exec rm -f {} +
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache

  docs:
    targets:
      build:
        help: Build documentation
        run: |
          mkdocs build --config-file mkdocs.yaml

      preview:
        help: Preview documentation page locally
        run: |
          mkdocs serve --watch docs --config-file mkdocs.yaml

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p conventional-changelog-conventionalcommits \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "semantic-release-replace-plugin" \
        semantic-release

    targets:
      ci:
        help: Run semantic release on CI
        run: {{ vars.app }} --ci

      dry:
        help: Run semantic release in dry-run mode
        run: |
          {{ vars.app }} --dry-run
          poetry build
          poetry publish --dry-run

  tests:
    targets:
      linter:
        help: Run linter tools
        run: pre-commit run --all-files

      unittest:
        help: Run tests
        run: pytest -s -vv tests

      smoke:
        help: Run smoke tests
        dependencies:
          - target: smoke-tests.simple
          - target: smoke-tests.complex
          - target: smoke-tests.containers
          - target: smoke-tests.unittest
          - target: smoke-tests.vars-env
          - target: smoke-tests.test-vars
          - target: smoke-tests.bash
          - target: smoke-tests.working-directory-absolute-path
          - target: smoke-tests.working-directory-no-path
          - target: smoke-tests.working-directory-relative-path

      ci:
        help: Run all targets used on CI
        dependencies:
          - target: tests.linter
          - target: tests.unittest
          - target: tests.smoke
          - target: docs.build

  smoke-tests:
    targets:
      simple:
        help: Test makim using a simple makimfile
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-simple.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE default.clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE default.build

      complex:
        help: Test makim using a complex makimfile
        env:
          MAKIM_FILE: ./tests/smoke/.makim-complex.yaml
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE default.lint
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.clean-gcda
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.install
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release --build-type debug
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release --extras '-D'
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release --clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.dev
          makim $VERBOSE_FLAG --file $MAKIM_FILE env.create-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE conda.build
          makim $VERBOSE_FLAG --file $MAKIM_FILE release.ci
          makim $VERBOSE_FLAG --file $MAKIM_FILE release.dry
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.api
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.build
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.preview
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.sanitizer
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.code-coverage
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.gen-object
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.gen-ast
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.gen-llvm-ir
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.examples
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.all
          makim $VERBOSE_FLAG --file $MAKIM_FILE debug.fibonacci
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.local-env-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.makim-env-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.dotenv-var
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.nested

      containers:
        help: Test makim with containers-sugar
        env:
          # it change the directory first to tests/smoke
          MAKIM_FILE: .makim-sugar.yaml
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          cd ./tests/smoke
          makim $VERBOSE_FLAG --file $MAKIM_FILE containers.run

      shell-app:
        help: |
          Test makim with working-directory for global no-path and its various
          combinations with group and target working-directory
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-interpreters.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          export MAKIM_FILE="$(pwd)/${MAKIM_FILE}"
          makim $VERBOSE_FLAG --file $MAKIM_FILE main.all

      unittest:
        help: Test makim using a unittest makimfile
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-unittest.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-1
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-2 --all
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-3-a
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-3-b
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-4
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-4 --trigger-dep
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-5
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-6

      vars-env:
        help: Test makim using env makimfile
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-env.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE global-scope.test-var-env-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE global-scope.test-var-env
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-scope.test-var-env-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-scope.test-var-env
          makim $VERBOSE_FLAG --file $MAKIM_FILE target-scope.test-var-env-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE target-scope.test-var-env
          makim $VERBOSE_FLAG --file $MAKIM_FILE rerender-env.from-global
          makim $VERBOSE_FLAG --file $MAKIM_FILE rerender-env.from-group
          makim $VERBOSE_FLAG --file $MAKIM_FILE rerender-env.from-target

      test-vars:
        help: Test makim using a vars makim file
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-vars.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE vars-group.vars-target

      bash:
        help: Test makim shell attribute with bash
        shell: bash
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file tests/smoke/.makim-bash-main-scope.yaml main-scope.test
          makim $VERBOSE_FLAG --file tests/smoke/.makim-bash-group-scope.yaml group-scope.test
          makim $VERBOSE_FLAG --file tests/smoke/.makim-bash-target-scope.yaml target-scope.test

      working-directory-absolute-path:
        help: |
          Test makim with working-directory absolute for global path and its various
          combinations with group and target working-directory
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-working-directory-absolute-path.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-relative

      working-directory-no-path:
        help: |
          Test makim with working-directory for global no-path and its
          various combinations with group and target working-directory
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-working-directory-no-path.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          export MAKIM_FILE="$(pwd)/${MAKIM_FILE}"
          cd /tmp
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-relative

      working-directory-relative-path:
        help: |
          Test makim with working-directory for global no-path and its various
          combinations with group and target working-directory
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-working-directory-relative-path.yaml
        shell: bash
        run: |
          export VERBOSE_FLAG='{{ "--verbose" if args.verbose_mode else "" }}'
          export MAKIM_FILE="$(pwd)/${MAKIM_FILE}"
          mkdir -p /tmp/global-relative
          cd /tmp
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.target-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.target-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.target-relative

  error:
    help: This group helps tests failure targets
    targets:
      python-assert:
        help: Raise an system error
        shell: python
        run: assert False, "Failed"
      code-3:
        help: Raise an system error
        shell: bash
        run: exit 3
