groups:
  clean:
    tasks:
      tmp:
        help: Clean unnecessary temporary files
        backend: bash
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache
          rm -fr .ruff_cache
          rm -fr .mypy_cache
          rm -fr ./tests/smoke/logs/
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name '__pycache__' -exec rm -fr {} +
          find . -name '*.pyo' -exec rm -f {} +
          find . -name '*~' -exec rm -f {} +

  docs:
    tasks:
      build:
        help: Build documentation
        run: |
          mkdocs build --config-file mkdocs.yaml

      preview:
        help: Preview documentation page locally
        run: |
          mkdocs serve --watch docs --config-file mkdocs.yaml

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p conventional-changelog-conventionalcommits@7.0.2 \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "semantic-release-replace-plugin" \
        semantic-release

    tasks:
      ci:
        help: Run semantic release on CI
        run: ${{ vars.app }} --ci

      dry:
        help: Run semantic release in dry-run mode
        run: |
          ${{ vars.app }} --dry-run
          poetry build
          poetry publish --dry-run

  tests:
    tasks:
      linter:
        help: Run linter tools
        run: pre-commit run --all-files

      unittest:
        help: Run tests
        run: pytest -s -vv tests

      smoke:
        help: Run smoke tests
        hooks:
          pre-run:
            - task: smoke-tests.simple
            - task: smoke-tests.complex
            - task: smoke-tests.containers
            - task: smoke-tests.unittest
            - task: smoke-tests.vars-env
            - task: smoke-tests.test-vars
            - task: smoke-tests.bash
            - task: smoke-tests.dir-absolute-path
            - task: smoke-tests.dir-no-path
            - task: smoke-tests.dir-relative-path
            - task: smoke-tests.interactive-args
            - task: smoke-tests.run-hooks
            - task: smoke-tests.matrix
            - task: smoke-tests.shell-app
            - task: smoke-tests.ssh-remote-execution
            - task: smoke-tests.scheduler
            - task: smoke-tests.task-logger
            - task: smoke-tests.retry
            - task: smoke-tests.validate-conditionals
            - task: smoke-tests.wsl-test
            - task: smoke-tests.powershell-test
            - task: smoke-tests.path-test
            - task: smoke-tests.command-test

      ci:
        help: Run all tasks used on CI
        hooks:
          pre-run:
            - task: tests.linter
            - task: tests.unittest
            - task: tests.smoke
            - task: docs.build

  smoke-tests:
    tasks:
      wsl-test:
        help: Test Windows and WSL compatibility
        backend: bash
        args:
          verbose-mode:
            help: Run in verbose mode
            type: bool
            action: store_true
        vars:
          platform_name: "${{ __import__('platform').system() }}"
          is_windows: "${{ __import__('platform').system() == 'Windows' }}"
          is_wsl: "${{ 'WSL_DISTRO_NAME' in __import__('os').environ or ('microsoft' in open('/proc/version').read().lower() if __import__('os').path.exists('/proc/version') else False) }}"
          shell: "${{ __import__('os').environ.get('SHELL', 'Unknown') }}"
        env:
          PLATFORM_NAME: "${{ vars.platform_name }}"
          IS_WINDOWS: "${{ vars.is_windows }}"
          IS_WSL: "${{ vars.is_wsl }}"
          SHELL_NAME: "${{ vars.shell }}"
        run: |
          echo "==== Platform Detection Test ===="
          echo "Platform: $PLATFORM_NAME"
          echo "Is Windows: $IS_WINDOWS"
          echo "Is WSL: $IS_WSL"
          echo "Shell: $SHELL_NAME"

          # Test platform-specific features
          if [ "$IS_WSL" = "True" ]; then
            echo "==== WSL-specific Tests ===="
            echo "Windows path conversion:"
            wslpath -w $(pwd) || echo "wslpath failed"

            echo "Windows command access test:"
            which powershell.exe > /dev/null 2>&1 && powershell.exe -Command "Write-Host 'PowerShell is working!' -ForegroundColor Green" || echo "PowerShell.exe not found"
          fi

          if [ "$IS_WINDOWS" = "True" ]; then
            echo "==== Windows-specific Tests ===="
            echo "PowerShell command test:"
            powershell -Command "Write-Host 'Running on Windows' -ForegroundColor Green"
          fi

          echo "==== Environment Variables ===="
          echo "PATH: $PATH"
          echo "HOME: $HOME"

          echo "==== File System Test ===="
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

          echo "==== Test completed successfully ===="

      powershell-test:
        help: Test PowerShell script execution via Makim
        backend: python
        run: |
          import os
          import tempfile
          import subprocess
          import platform

          print("==== PowerShell Integration Test ====")

          # Create a temporary PowerShell script
          with tempfile.NamedTemporaryFile(suffix='.ps1', delete=False, mode='w') as f:
              f.write('''
              Write-Host "PowerShell script execution test"
              Write-Host "Windows version:" -ForegroundColor Green
              $OSInfo = New-Object -ComObject "WScript.Shell"
              Write-Host $OSInfo.RegRead("HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProductName")
              Write-Host "Current directory:" -ForegroundColor Green
              Get-Location
              ''')
              ps_script = f.name

          try:
              if platform.system() == "Windows":
                  print("Executing PowerShell script directly on Windows...")
                  subprocess.call(["powershell", "-ExecutionPolicy", "Bypass", "-File", ps_script])
              elif "WSL_DISTRO_NAME" in os.environ or ("microsoft" in platform.uname().release.lower() if platform.system() == "Linux" else False):
                  print("Executing PowerShell script from WSL...")
                  # Convert path to Windows format
                  try:
                      win_path = subprocess.check_output(["wslpath", "-w", ps_script], text=True).strip()
                      subprocess.call(["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", win_path])
                  except Exception as e:
                      print(f"Error converting path or executing PowerShell: {e}")
              else:
                  print("PowerShell not available on this platform")
          except Exception as e:
              print(f"Error executing PowerShell: {e}")
          finally:
              # Clean up
              os.unlink(ps_script)

      path-test:
        help: Test path conversion between Windows and Unix formats
        backend: python
        run: |
          import os
          import platform
          import subprocess

          print("==== Path Conversion Test ====")
          current_dir = os.getcwd()
          print(f"Current directory (native): {current_dir}")

          if platform.system() == "Windows":
              print("Windows path handling:")
              # Convert to Unix-style for display
              print(f"  Windows path: {current_dir}")
              print(f"  Unix-style: {current_dir.replace('\\', '/')}")
          elif "WSL_DISTRO_NAME" in os.environ or ("microsoft" in platform.uname().release.lower() if platform.system() == "Linux" else False):
              print("WSL path handling:")
              try:
                  # Unix to Windows path
                  win_path = subprocess.check_output(["wslpath", "-w", current_dir], text=True).strip()
                  print(f"  Unix path: {current_dir}")
                  print(f"  Windows path: {win_path}")

                  # Windows back to Unix path
                  unix_path = subprocess.check_output(["wslpath", "-u", win_path], text=True).strip()
                  print(f"  Converted back to Unix: {unix_path}")

                  # Check if the round-trip conversion is accurate
                  print(f"  Round-trip conversion successful: {unix_path == current_dir}")
              except Exception as e:
                  print(f"  Error in path conversion: {e}")
          else:
              print("Running on native Linux - path conversion not applicable")

      command-test:
        help: Test cross-platform command execution
        backend: python
        run: |
          import os
          import platform
          import subprocess
          import tempfile

          print("==== Cross-Platform Command Test ====")

          # Test commands
          unix_commands = [
              "mkdir -p test_dir/nested",
              "touch test_dir/nested/test.txt",
              "ls -la test_dir",
              "cat /etc/os-release 2>/dev/null || echo 'OS release info not available'",
          ]

          windows_commands = [
              "mkdir test_dir\\nested",
              "echo Hello > test_dir\\nested\\test.txt",
              "dir test_dir",
              "ver",
          ]

          # Determine which commands to run
          if platform.system() == "Windows":
              print("Running Windows commands...")
              commands = windows_commands
              shell = True
          elif "WSL_DISTRO_NAME" in os.environ or ("microsoft" in platform.uname().release.lower() if platform.system() == "Linux" else False):
              print("Running Unix commands in WSL...")
              commands = unix_commands
              shell = True

              print("\nTesting access to Windows commands from WSL:")
              try:
                  output = subprocess.check_output(["cmd.exe", "/c", "ver"], text=True, stderr=subprocess.PIPE)
                  print(f"Windows version: {output.strip()}")
              except Exception as e:
                  print(f"Error accessing Windows commands: {e}")
          else:
              print("Running Unix commands on Linux...")
              commands = unix_commands
              shell = True

          # Execute the commands
          print("\nExecuting platform-specific commands:")
          for cmd in commands:
              print(f"\nRunning: {cmd}")
              try:
                  subprocess.call(cmd, shell=shell)
              except Exception as e:
                  print(f"Command failed: {e}")

          # Clean up
          try:
              if platform.system() == "Windows":
                  subprocess.call("rmdir /s /q test_dir", shell=True)
              else:
                  subprocess.call("rm -rf test_dir", shell=True)
          except Exception as e:
              print(f"Clean-up failed: {e}")

      simple:
        help: Test makim using a simple makimfile
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-simple.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE default.clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE default.build

      complex:
        help: Test makim using a complex makimfile
        env:
          MAKIM_FILE: ./tests/smoke/.makim-complex.yaml
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE default.lint
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.clean-gcda
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.install
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release --build-type debug
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release --extras '-D'
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.release --clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.dev
          makim $VERBOSE_FLAG --file $MAKIM_FILE env.create-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE conda.build
          makim $VERBOSE_FLAG --file $MAKIM_FILE release.ci
          makim $VERBOSE_FLAG --file $MAKIM_FILE release.dry
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.api
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.build
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.clean
          makim $VERBOSE_FLAG --file $MAKIM_FILE docs.preview
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.sanitizer
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.code-coverage
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.gen-object
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.gen-ast
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.gen-llvm-ir
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.examples
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.all
          makim $VERBOSE_FLAG --file $MAKIM_FILE debug.fibonacci
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.local-env-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.makim-env-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.dotenv-var
          makim $VERBOSE_FLAG --file $MAKIM_FILE print.nested

      containers:
        help: Test makim with containers-sugar
        env:
          # it change the directory first to tests/smoke
          MAKIM_FILE: .makim-sugar.yaml
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          cd ./tests/smoke
          makim $VERBOSE_FLAG --file $MAKIM_FILE containers.run

      shell-app:
        help: |
          Test makim with dir for global no-path and its various
          combinations with group and task dir
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-interpreters.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          export MAKIM_FILE="$(pwd)/${MAKIM_FILE}"
          makim $VERBOSE_FLAG --file $MAKIM_FILE main.all

      unittest:
        help: Test makim using a unittest makimfile
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-unittest.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-1
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-2 --all
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-3-a
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-3-b
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-4
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-4 --trigger-dep
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-5
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-6

      vars-env:
        help: Test makim using env makimfile
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-env.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE global-scope.test-var-env-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE global-scope.test-var-env
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-scope.test-var-env-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-scope.test-var-env
          makim $VERBOSE_FLAG --file $MAKIM_FILE task-scope.test-var-env-file
          makim $VERBOSE_FLAG --file $MAKIM_FILE task-scope.test-var-env
          makim $VERBOSE_FLAG --file $MAKIM_FILE rerender-env.from-global
          makim $VERBOSE_FLAG --file $MAKIM_FILE rerender-env.from-group
          makim $VERBOSE_FLAG --file $MAKIM_FILE rerender-env.from-task

      test-vars:
        help: Test makim using a vars makim file
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: ./tests/smoke/.makim-vars.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE vars-group.vars-task

      bash:
        help: Test makim shell attribute with bash
        backend: bash
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file tests/smoke/.makim-bash-main-scope.yaml main-scope.test
          makim $VERBOSE_FLAG --file tests/smoke/.makim-bash-group-scope.yaml group-scope.test
          makim $VERBOSE_FLAG --file tests/smoke/.makim-bash-task-scope.yaml task-scope.test

      dir-absolute-path:
        help: |
          Test makim with dir absolute for global path and its various
          combinations with group and task dir
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-dir-absolute-path.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-relative

      dir-no-path:
        help: |
          Test makim with dir for global no-path and its
          various combinations with group and task dir
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-dir-no-path.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          export MAKIM_FILE="$(pwd)/${MAKIM_FILE}"
          cd /tmp
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-relative

      dir-relative-path:
        help: |
          Test makim with dir for global no-path and its various
          combinations with group and task dir
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-dir-relative-path.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          export MAKIM_FILE="$(pwd)/${MAKIM_FILE}"
          mkdir -p /tmp/global-relative
          cd /tmp
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-no-path.task-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-absolute.task-relative
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-no-path
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-absolute
          makim $VERBOSE_FLAG --file $MAKIM_FILE group-relative.task-relative

      interactive-args:
        help: Test makim with interactive-args
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-interactive-args.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE user.create --username johndoe --email johndoe@gmail.com --password johndoe
          makim $VERBOSE_FLAG --file $MAKIM_FILE weather.forecast --city Delhi --country India

          RESULT=$(echo mycity | makim $VERBOSE_FLAG --file $MAKIM_FILE weather.forecast --country mycountry)
          STRING_VALIDATION="Fetching weather forecast for mycity, mycountry..."
          # Check if RESULT contains SUBSTRING
          if [[ "$RESULT" != *"$STRING_VALIDATION"* ]]; then
              echo "STRING_VALIDATION not found in RESULT."
              exit 1
          fi

      run-hooks:
        help: Test makim with pre-run and post-run hooks
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-hooks.yaml
        backend: bash
        hooks:
          post-run:
            - task: clean.tmp
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.compile
          makim $VERBOSE_FLAG --skip-hooks --file $MAKIM_FILE skip-hooks.skip_pre_hooks
          makim $VERBOSE_FLAG --skip-hooks --file $MAKIM_FILE skip-hooks.skip_post_hooks
          makim $VERBOSE_FLAG --skip-hooks --file $MAKIM_FILE skip-hooks.skip_both_hooks
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-global-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-global-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-group-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-group-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-task-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-task-vars

      matrix:
        help: Test makim with matrix combination
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-matrix-strategy.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.setup
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.lint
          makim $VERBOSE_FLAG --file $MAKIM_FILE build.lint --fix
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.unit
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.browser
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.browser --headless

      ssh-remote-execution:
        help: Test makim with remote execution
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-ssh.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE remote_test.echo_test

      scheduler:
        help: Test makim with scheduler
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-scheduler.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.test-date
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.test-echo
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.test-sleep
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.test-all
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron list
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron start test_basic_echo
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron list
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron start --all
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron list
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron stop test_basic_echo
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron list
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron stop --all
          makim $VERBOSE_FLAG --file $MAKIM_FILE cron list

      task-logger:
        help: Test makim with file logs
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-file-log.yaml
        backend: bash
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.out-no-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.err-no-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.both-no-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.out-file-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.err-file-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.both-file-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.out-task-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.err-task-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.both-task-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.out-level-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.err-level-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.both-level-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.out-message-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.err-message-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.both-message-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.out-time-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.err-time-format
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.both-time-format

      retry:
        help: Test makim tasks with retry config
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-retry.yaml
        backend: bash
        hooks:
          post-run:
            - task: clean.tmp
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.success
          makim $VERBOSE_FLAG --file $MAKIM_FILE test.eventually_success

      validate-conditionals:
        help: Test makim tasks with conditionals
        args:
          verbose-mode:
            help: Run the all the tests in verbose mode
            type: bool
            action: store_true
        env:
          MAKIM_FILE: tests/smoke/.makim-task-conditionals.yaml
        backend: bash
        hooks:
          post-run:
            - task: clean.tmp
        run: |
          export VERBOSE_FLAG='${{ "--verbose" if args.verbose_mode else "" }}'
          makim $VERBOSE_FLAG --file $MAKIM_FILE --help
          makim $VERBOSE_FLAG --file $MAKIM_FILE --version
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-conditional
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-conditional
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-args
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-args
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-global-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-global-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-group-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-group-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-correct-task-vars
          makim $VERBOSE_FLAG --file $MAKIM_FILE tests.test-wrong-task-vars

  error:
    help: This group helps tests failure tasks
    tasks:
      python-assert:
        help: Raise an system error
        backend: python
        run: assert False, "Failed"
      code-3:
        help: Raise an system error
        backend: bash
        run: exit 3

  docker:
    help: Tasks with docker
    tasks:
      build:
        help: Build the dockerfile for ssh tests
        dir: containers
        env:
          DOCKER_BUILDKIT: "0"
        run: docker build -t ssh-test .

      start:
        help: Start a service from the dockerfile for ssh tests
        dir: containers
        env:
          DOCKER_BUILDKIT: "0"
        hooks:
          pre-run:
            - task: docker.build
        run: docker run -d -p 2222:22 --rm --name ssh-test ssh-test

      stop:
        help: Start a service from the dockerfile for ssh tests
        dir: containers
        env:
          DOCKER_BUILDKIT: "0"
        run: docker stop ssh-test

      test:
        help: Test ssh connection with the docker service
        dir: containers
        run: |
          # it requires the password manually
          ssh-keygen -R "[localhost]:2222" || true
          ssh -o StrictHostKeyChecking=no testuser@localhost -p 2222 'pwd'

  windows-compatibility:
    help: Tests specifically for Windows compatibility features
    tasks:
      verify-all:
        help: Run all Windows compatibility tests
        hooks:
          pre-run:
            - task: windows-compatibility.platform-detection
            - task: windows-compatibility.powershell-backend
            - task: windows-compatibility.cmd-backend
            - task: windows-compatibility.path-handling
            - task: windows-compatibility.performance-benchmark

      platform-detection:
        help: Test platform detection mechanisms
        backend: python
        run: |
          import platform
          import os
          from makim.core import is_windows, is_wsl

          print("=== Platform Detection Test ===")
          print(f"Platform system: {platform.system()}")
          print(f"is_windows(): {is_windows()}")
          print(f"is_wsl(): {is_wsl()}")

          # Verify correct detection
          if platform.system() == 'Windows':
              assert is_windows(), "Failed to detect Windows"
              assert not is_wsl(), "Incorrectly detected as WSL"
          elif 'WSL_DISTRO_NAME' in os.environ:
              assert not is_windows(), "Incorrectly detected as Windows"
              assert is_wsl(), "Failed to detect WSL"
          else:
              print("Running on non-Windows platform")

          print("Platform detection test passed!")

      powershell-backend:
        help: Test PowerShell as backend on Windows/WSL
        run: |
          # Create a temporary PowerShell test file
          if [ -d "/tmp" ]; then
            TEST_DIR="/tmp"
          else
            TEST_DIR="$TEMP"
          fi

          PS_TEST="$TEST_DIR/makim_test_$$.ps1"
          echo 'Write-Output "PowerShell backend test successful!"' > "$PS_TEST"

          # Create a simple makim file for testing PowerShell backend
          PS_MAKIM="$TEST_DIR/makim_ps_$$.yaml"
          cat > "$PS_MAKIM" << 'EOF'
          groups:
            test:
              tasks:
                powershell:
                  help: Test PowerShell backend
                  backend: powershell
                  run: |
                    Write-Output "Running with PowerShell backend"
                    Get-Date
          EOF

          # Run the test
          echo "Testing PowerShell backend..."
          makim --verbose --file "$PS_MAKIM" test.powershell

          # Clean up
          rm -f "$PS_TEST" "$PS_MAKIM"

      cmd-backend:
        help: Test CMD as backend on Windows
        run: |
          if [ "$(uname -s)" = "Windows_NT" ] || [ -n "$WSL_DISTRO_NAME" ]; then
            # Create a temporary cmd test file
            if [ -d "/tmp" ]; then
              TEST_DIR="/tmp"
            else
              TEST_DIR="$TEMP"
            fi

            CMD_MAKIM="$TEST_DIR/makim_cmd_$$.yaml"
            cat > "$CMD_MAKIM" << 'EOF'
            groups:
              test:
                tasks:
                  cmd:
                    help: Test CMD backend
                    backend: cmd
                    run: |
                      echo Running with CMD backend
                      echo Current directory: %CD%
            EOF

            # Run the test
            echo "Testing CMD backend..."
            makim --verbose --file "$CMD_MAKIM" test.cmd

            # Clean up
            rm -f "$CMD_MAKIM"
          else
            echo "Skipping CMD backend test on non-Windows platform"
          fi

      path-handling:
        help: Test path handling across platforms
        backend: python
        run: |
          import os
          import platform
          from pathlib import Path
          from makim.core import _normalize_path

          print("=== Path Handling Test ===")

          # Test basic path normalization
          test_paths = [
              "/path/to/test",
              "C:\\Users\\test\\Documents",
              "./relative/path",
              "..\\parent\\path",
              "~\\home\\path" if platform.system() == "Windows" else "~/home/path",
          ]

          for path in test_paths:
              norm_path = _normalize_path(path)
              print(f"Original: {path}")
              print(f"Normalized: {norm_path}")
              print(f"pathlib Path: {Path(path)}")
              print("---")

          # Test current directory resolution
          print(f"Current dir: {os.getcwd()}")
          print(f"Normalized current dir: {_normalize_path(os.getcwd())}")
          print("Path handling tests completed!")

      performance-benchmark:
        help: Benchmark subprocess vs sh performance
        backend: python
        run: |
          import time
          import platform
          import subprocess
          import os

          print("=== Performance Benchmark ===")
          print(f"Platform: {platform.system()}")

          ITERATIONS = 10

          def run_subprocess_test():
              start = time.time()
              for _ in range(ITERATIONS):
                  if platform.system() == "Windows":
                      subprocess.run(["cmd", "/c", "echo", "test"], capture_output=True, text=True)
                  else:
                      subprocess.run(["echo", "test"], capture_output=True, text=True)
              end = time.time()
              return end - start

          subprocess_time = run_subprocess_test()
          print(f"subprocess module ({ITERATIONS} iterations): {subprocess_time:.4f}s")

          # Only test sh on non-Windows platforms
          if platform.system() != "Windows":
              try:
                  import sh
                  def run_sh_test():
                      start = time.time()
                      for _ in range(ITERATIONS):
                          result = sh.echo("test", _out=subprocess.DEVNULL)
                      end = time.time()
                      return end - start

                  sh_time = run_sh_test()
                  print(f"sh module ({ITERATIONS} iterations): {sh_time:.4f}s")
                  print(f"Comparison: subprocess is {sh_time/subprocess_time:.2f}x the speed of sh")
              except ImportError:
                  print("sh module not available for testing")

          print("Benchmark completed!")

  ci:
    help: Continuous Integration tasks
    tasks:
      windows-tests:
        help: Run Windows compatibility tests in CI
        hooks:
          pre-run:
            - task: windows-compatibility.verify-all
